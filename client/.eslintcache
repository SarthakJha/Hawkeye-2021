[{"/usr/src/client/src/index.tsx":"1","/usr/src/client/src/App.tsx":"2","/usr/src/client/src/context/AuthContext.tsx":"3","/usr/src/client/src/components/ErrorBoundary.tsx":"4","/usr/src/client/src/components/ScrollToTop.tsx":"5","/usr/src/client/src/components/PrivateRoute.tsx":"6","/usr/src/client/src/utils/requests.ts":"7","/usr/src/client/src/pages/Home.tsx":"8","/usr/src/client/src/pages/Landing.tsx":"9","/usr/src/client/src/components/Loading.tsx":"10","/usr/src/client/src/pages/Admin.tsx":"11"},{"size":749,"mtime":1620740643192,"results":"12","hashOfConfig":"13"},{"size":648,"mtime":1620733774775,"results":"14","hashOfConfig":"13"},{"size":2724,"mtime":1620732454325,"results":"15","hashOfConfig":"13"},{"size":951,"mtime":1620402266396,"results":"16","hashOfConfig":"13"},{"size":287,"mtime":1620402266396,"results":"17","hashOfConfig":"13"},{"size":849,"mtime":1620755197878,"results":"18","hashOfConfig":"13"},{"size":1002,"mtime":1620748517608,"results":"19","hashOfConfig":"13"},{"size":134,"mtime":1620719385717,"results":"20","hashOfConfig":"13"},{"size":140,"mtime":1620717927687,"results":"21","hashOfConfig":"13"},{"size":559,"mtime":1620402266396,"results":"22","hashOfConfig":"13"},{"size":7001,"mtime":1620808453274,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ph5nbg",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/usr/src/client/src/index.tsx",[],["51","52"],"/usr/src/client/src/App.tsx",["53","54"],"import React, { ReactElement, useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Home from \"./pages/Home\";\n\nimport {useAuth} from \"./context/AuthContext\"; \n\nexport default function App(): ReactElement {\n   const auth = useAuth();\n  useEffect(() => {\n    console.log(process.env.REACT_APP_API_URI);\n    console.log(\"hello testt\" + auth?.user)\n  }, [])\n\n  return (\n    <React.Fragment>\n      <Switch>\n        \n        <PrivateRoute exact path=\"/\" component={Home} />\n        {/* <Route path=\"*\" component={Home} /> */}\n      </Switch>\n    </React.Fragment>\n  );\n}\n","/usr/src/client/src/context/AuthContext.tsx",["55"],"import {\n  ReactElement,\n  useContext,\n  createContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { Nullable, User, Children } from \"../utils/types\";\n\nimport { get, post } from \"../utils/requests\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\n\ntype Value = {\n  user: any;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => Promise<void>;\n  loading: Boolean;\n  fetchMe: () => Promise<any>;\n  check: () => Promise<any>;\n};\n\nconst AuthContext = createContext<Nullable<Value>>(null);\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport default function AuthProvider({ children }: Children): ReactElement {\n  const [user, setUser] = useState<Nullable<User>>(null);\n  const [loading, setLoading] = useState<Boolean>(true);\n\n  const history = useHistory();\n\n  const { addToast } = useToasts();\n\n  const fetchMe = async () => {\n    try {\n      await get(\"/me\").then(setUser);\n    } catch (err) {\n      logout();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        await fetchMe();\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    // setLoading(true);\n\n    try {\n      await post(\"/login\", {\n        email,\n        password,\n      });\n\n      await fetchMe();\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const register = async (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => {\n    try {\n      await post(\"/register\", {\n        name,\n        username,\n        email,\n        password,\n      });\n\n      history.push(\"/login\");\n      addToast(\"Verification Mail Sent\", { appearance: \"info\" });\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setUser(null);\n      setLoading(false);\n      await post(\"/logout\");\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const check = async () => {\n    try {\n      const res = await get(\"/me\");\n      if (!res) {\n        logout();\n        addToast(\"Session Timed Out\", { appearance: \"error\" });\n        return;\n      }\n      setUser(res);\n      history.push(\"/\");\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    } catch (err) {\n      logout();\n      addToast(\"Session Timed Out\", { appearance: \"error\" });\n    }\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    loading,\n    fetchMe,\n    check,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n","/usr/src/client/src/components/ErrorBoundary.tsx",[],"/usr/src/client/src/components/ScrollToTop.tsx",[],"/usr/src/client/src/components/PrivateRoute.tsx",["56"],"import React, { ReactElement } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport { useAuth } from \"../context/AuthContext\";\nimport AdminPage from \"../pages/Admin\";\nimport Landing from \"../pages/Landing\";\nimport Loading from \"./Loading\";\n\ninterface Props {\n  component: React.FC<any>;\n  path: string | string[];\n  exact?: boolean;\n}\n\nexport default function PrivateRoute({\n  component: Component,\n  ...rest\n}: Props): ReactElement {\n  const auth = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (auth?.user) {\n          return <Component {...props} />;\n        } else {\n          if (auth?.loading)\n            return (\n              <div className=\"screen-center\">\n                <Loading />\n              </div>\n            );\n          return <AdminPage />;\n        }\n      }}\n    />\n  );\n}\n","/usr/src/client/src/utils/requests.ts",[],"/usr/src/client/src/pages/Home.tsx",[],"/usr/src/client/src/pages/Landing.tsx",[],["57","58"],"/usr/src/client/src/components/Loading.tsx",[],"/usr/src/client/src/pages/Admin.tsx",["59","60","61","62","63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":18,"nodeType":"71","messageId":"72","endLine":2,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":13,"column":6,"nodeType":"75","endLine":13,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":61,"column":6,"nodeType":"75","endLine":61,"endColumn":8,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"79","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":15},{"ruleId":"65","replacedBy":"80"},{"ruleId":"67","replacedBy":"81"},{"ruleId":"69","severity":1,"message":"82","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":14},{"ruleId":"69","severity":1,"message":"83","line":3,"column":15,"nodeType":"71","messageId":"72","endLine":3,"endColumn":19},{"ruleId":"73","severity":1,"message":"84","line":136,"column":8,"nodeType":"75","endLine":136,"endColumn":10,"suggestions":"85"},{"ruleId":"69","severity":1,"message":"86","line":186,"column":18,"nodeType":"71","messageId":"72","endLine":186,"endColumn":27},{"ruleId":"69","severity":1,"message":"87","line":190,"column":24,"nodeType":"71","messageId":"72","endLine":190,"endColumn":35},{"ruleId":"69","severity":1,"message":"88","line":192,"column":22,"nodeType":"71","messageId":"72","endLine":192,"endColumn":32},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth?.user'. Either include it or remove the dependency array.","ArrayExpression",["91"],"React Hook useEffect has a missing dependency: 'fetchMe'. Either include it or remove the dependency array.",["92"],"'Landing' is defined but never used.",["89"],["90"],"'type' is defined but never used.","'post' is defined but never used.","React Hook useEffect has missing dependencies: 'hints', 'questionobj.question._id', 'questionobj.question.answer', 'questionobj.question.hints', 'questionobj.question.keywords', 'questionobj.question.level', 'questionobj.question.region', and 'questionobj.question.text'. Either include them or remove the dependency array. If 'setText' needs the current value of 'questionobj.question.text', you can also switch to useReducer instead of useState and read 'questionobj.question.text' in the reducer.",["93"],"'setquesID' is assigned a value but never used.","'setKeywords' is assigned a value but never used.","'setRegions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [auth?.user]",{"range":"100","text":"101"},"Update the dependencies array to be: [fetchMe]",{"range":"102","text":"103"},"Update the dependencies array to be: [hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]",{"range":"104","text":"105"},[433,435],"[auth?.user]",[1322,1324],"[fetchMe]",[3343,3345],"[hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]"]