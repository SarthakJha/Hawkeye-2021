[{"/usr/src/client/src/index.tsx":"1","/usr/src/client/src/App.tsx":"2","/usr/src/client/src/components/ScrollToTop.tsx":"3","/usr/src/client/src/components/ErrorBoundary.tsx":"4","/usr/src/client/src/context/AuthContext.tsx":"5","/usr/src/client/src/utils/requests.ts":"6","/usr/src/client/src/components/PrivateRoute.tsx":"7","/usr/src/client/src/pages/Home.tsx":"8","/usr/src/client/src/pages/auth/ForgotPassword.tsx":"9","/usr/src/client/src/pages/auth/Login.tsx":"10","/usr/src/client/src/pages/auth/Register.tsx":"11","/usr/src/client/src/pages/Questions.tsx":"12","/usr/src/client/src/pages/auth/ResetPassword.tsx":"13","/usr/src/client/src/pages/Admin.tsx":"14","/usr/src/client/src/components/Loading.tsx":"15","/usr/src/client/src/pages/Landing.tsx":"16","/usr/src/client/src/hooks/useInputState.ts":"17","/usr/src/client/src/components/Img.tsx":"18","/usr/src/client/src/components/Input.tsx":"19","/usr/src/client/src/components/Button.tsx":"20"},{"size":747,"mtime":1620941979885,"results":"21","hashOfConfig":"22"},{"size":1239,"mtime":1621117560745,"results":"23","hashOfConfig":"22"},{"size":287,"mtime":1620941979885,"results":"24","hashOfConfig":"22"},{"size":951,"mtime":1620941979885,"results":"25","hashOfConfig":"22"},{"size":4072,"mtime":1620941979885,"results":"26","hashOfConfig":"22"},{"size":979,"mtime":1621117560745,"results":"27","hashOfConfig":"22"},{"size":890,"mtime":1620941979885,"results":"28","hashOfConfig":"22"},{"size":138,"mtime":1621117560745,"results":"29","hashOfConfig":"22"},{"size":1851,"mtime":1621117560745,"results":"30","hashOfConfig":"22"},{"size":2591,"mtime":1621117560745,"results":"31","hashOfConfig":"22"},{"size":3819,"mtime":1621117560745,"results":"32","hashOfConfig":"22"},{"size":3674,"mtime":1621117560745,"results":"33","hashOfConfig":"22"},{"size":2088,"mtime":1621117560745,"results":"34","hashOfConfig":"22"},{"size":6871,"mtime":1621025077740,"results":"35","hashOfConfig":"22"},{"size":559,"mtime":1620941979885,"results":"36","hashOfConfig":"22"},{"size":228,"mtime":1621117560745,"results":"37","hashOfConfig":"22"},{"size":447,"mtime":1620941979885,"results":"38","hashOfConfig":"22"},{"size":417,"mtime":1620941979885,"results":"39","hashOfConfig":"22"},{"size":843,"mtime":1621117560745,"results":"40","hashOfConfig":"22"},{"size":484,"mtime":1621117560745,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yftbs7",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/usr/src/client/src/index.tsx",[],"/usr/src/client/src/App.tsx",[],"/usr/src/client/src/components/ScrollToTop.tsx",[],"/usr/src/client/src/components/ErrorBoundary.tsx",[],"/usr/src/client/src/context/AuthContext.tsx",["89"],"import React, {\n  ReactElement,\n  useContext,\n  createContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { Nullable, User, Children } from \"../utils/types\";\n\n \n\nimport { get, post, put } from \"../utils/requests\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\n \n\nimport { useToasts } from \"react-toast-notifications\";\n\n \n\ntype Value = {\n  user: Nullable<User>;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  register: (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => Promise<void>;\n  isAdmin: () => boolean;\n  loading: Boolean;\n  isCurrentUserProfile: () => boolean;\n  forgotPassword: (email: string) => Promise<void>;\n  resetPassword: (password: string, token: string) => Promise<void>;\n  fetchMe: () => Promise<void>;\n  updateUser: (userData: User) => void;\n  check: () => Promise<void>;\n};\n\n \n\nconst AuthContext = createContext<Nullable<Value>>(null);\n\n \n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\n \n\nexport default function AuthProvider({ children }: Children): ReactElement {\n  const [user, setUser] = useState<Nullable<User> | any>(null);\n  const [loading, setLoading] = useState<Boolean>(true);\n\n \n\n  const location = useLocation();\n  const history = useHistory();\n\n \n\n  const { addToast } = useToasts();\n\n \n\n  const fetchMe = async () => {\n    try {\n      await get(\"/me\").then(setUser);\n    } catch (err) {\n      logout();\n    }\n  };\n\n \n\n  useEffect(() => {\n    (async () => {\n      try {\n        await fetchMe();\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n \n\n  const login = async (email: string, password: string) => {\n    // setLoading(true);\n\n \n\n    try {\n      await post(\"/login\", {\n        email,\n        password,\n      });\n\n \n\n      await fetchMe();\n    } catch (err) {\n      throw err;\n    }\n  };\n\n \n\n  const register = async (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => {\n    try {\n      await post(\"/register\", {\n        name,\n        username,\n        email,\n        password,\n      });\n\n \n\n      history.push(\"/login\");\n      addToast(\"Verification Mail Sent\", { appearance: \"info\" });\n    } catch (err) {\n      throw err;\n    }\n  };\n\n \n\n  const logout = async () => {\n    try {\n      setUser(null);\n      setLoading(false);\n      await post(\"/logout\");\n    } catch (err) {\n      throw err;\n    }\n  };\n\n \n\n  const isCurrentUserProfile = () =>\n    location.pathname.split(\"/\").slice(-1)[0] === user?._id ||\n    location.pathname.split(\"/\").slice(-2)[0] === user?._id;\n\n \n\n  const forgotPassword = async (email: string) => {\n    try {\n      await post(\"/forgotpassword\", { email });\n      addToast(\"Mail Sent!\", { appearance: \"success\" });\n    } catch (err) {\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    }\n  };\n\n \n\n  const resetPassword = async (password: string, token: string) => {\n    try {\n      await put(`/resetpassword/${token}`, { password });\n      history.push(\"/login\");\n      addToast(\"Password Changed!\", { appearance: \"success\" });\n    } catch (err) {\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    }\n  };\n\n \n\n  const isAdmin = () => user?.role === 1;\n\n \n\n  const updateUser = (userData: User) => {\n    setUser(userData);\n  };\n\n \n\n  const check = async () => {\n    try {\n      const res = await get(\"/me\");\n      if (!res) {\n        logout();\n        addToast(\"Session Timed Out\", { appearance: \"error\" });\n        return;\n      }\n      setUser(res);\n      history.push(\"/\");\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    } catch (err) {\n      logout();\n      addToast(\"Session Timed Out\", { appearance: \"error\" });\n    }\n  };\n\n \n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    isAdmin,\n    forgotPassword,\n    loading,\n    isCurrentUserProfile,\n    resetPassword,\n    fetchMe,\n    updateUser,\n    check,\n  };\n\n \n\n  // {children}\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}","/usr/src/client/src/utils/requests.ts",[],"/usr/src/client/src/components/PrivateRoute.tsx",[],"/usr/src/client/src/pages/Home.tsx",[],"/usr/src/client/src/pages/auth/ForgotPassword.tsx",["90","91","92","93","94","95","96"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Button from \"../../components/Button\";\nimport Img from \"../../components/Img\";\nimport Input from \"../../components/Input\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function ForgotPassword({}: Props): ReactElement {\n  const [email, setEmail, resetEmail] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [banned, setBanned] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!email) errors.push(\"Email is Required\");\n\n    if (errors.length === 0) {\n      try {\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <div className=\"auth-page login forgot\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Forgot Password</h2>\n      {errors.map((err: string) => {\n        return <div className=\"error\">{err}</div>;\n      })}\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={email}\n          onChange={setEmail}\n          type=\"text\"\n          placeholder=\"Email ID\"\n          className=\"input\"\n        />\n        <div className=\"forgot\">\n          <Link to=\"/login\">Back to login</Link>\n        </div>\n        <Button className=\"auth-button\" name=\"Submit\" />\n      </form>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/auth/Login.tsx",["97","98","99","100","101"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Button from \"../../components/Button\";\nimport Img from \"../../components/Img\";\nimport Input from \"../../components/Input\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function Login({}: Props): ReactElement {\n  const [email, setEmail, resetEmail] = useInputState();\n  const [password, setPassword, resetPassword] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [banned, setBanned] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!email) errors.push(\"Email is Required\");\n    if (!password) errors.push(\"Password is Required\");\n\n    if (errors.length === 0) {\n      try {\n        await auth?.login(email, password);\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n\n        if (err.response.data.message === \"This route is forbidden!\")\n          setBanned(true);\n\n        if (err.response.data.message === \"User not verified\")\n          addToast(\"Verification link sent to mail\");\n\n        setErrors([err.response.data.message]);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <div className=\"auth-page login\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Log in</h2>\n      <h3>Welcome back player</h3>\n      {errors.map((err: string) => {\n        return <div className=\"error\">{err}</div>;\n      })}\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={email}\n          onChange={setEmail}\n          type=\"text\"\n          placeholder=\"Email ID\"\n          className=\"input\"\n        />\n        <Input\n          value={password}\n          onChange={setPassword}\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"input\"\n        />\n        <div className=\"forgot\">\n          <Link to=\"/forgot-password\">Forgot Password?</Link>\n        </div>\n        <Button className=\"auth-button\" name=\"Login\" />\n      </form>\n      <div className=\"swap\">\n        New to hawkeye? <Link to=\"/register\">Create Account</Link>{\" \"}\n      </div>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/auth/Register.tsx",["102","103","104","105","106","107","108","109","110"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Button from \"../../components/Button\";\nimport Img from \"../../components/Img\";\nimport Input from \"../../components/Input\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useInputState from \"../../hooks/useInputState\";\n\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\ninterface Props {}\n\nfunction validateEmail(email: string) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport default function Register({}: Props): ReactElement {\n  const [name, setName, resetName] = useInputState();\n  const [username, setUsername, resetUsername] = useInputState();\n  const [email, setEmail, resetEmail] = useInputState();\n  const [password, setPassword, resetPassword] = useInputState();\n  const [confirm, setConfirm, resetConfirm] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const [captcha, setCaptcha] = React.useState(false);\n  const handleVerify = () => {\n    setCaptcha(true);\n  };\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!name) errors.push(\"Name is Required\");\n    if (!username) errors.push(\"Username is Required\");\n    if (!email) errors.push(\"Email is Required\");\n    else if (!validateEmail(email)) errors.push(\"Email is invalid\");\n    if (!password) errors.push(\"Password is Required\");\n    else if (password.length < 8)\n      errors.push(\"Password must be atleast 8 Characters\");\n    else if (password !== confirm) errors.push(\"Passwords do not match\");\n    if (!captcha) errors.push(\"Captcha must be completed\");\n\n    if (errors.length === 0) {\n      try {\n        await auth?.register(name, username, email, password);\n        setLoading(false);\n      } catch (err) {\n        setErrors([err.response.data.message]);\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <div className=\"auth-page register\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Sign Up</h2>\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={name}\n          onChange={setName}\n          type=\"text\"\n          placeholder=\"Name\"\n          className=\"input\"\n        />\n        <Input\n          value={username}\n          onChange={setUsername}\n          type=\"text\"\n          placeholder=\"Username\"\n          className=\"input\"\n        />\n        <Input\n          value={email}\n          onChange={setEmail}\n          type=\"text\"\n          placeholder=\"Email ID\"\n          className=\"input\"\n        />\n        <Input\n          value={password}\n          onChange={setPassword}\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"input\"\n        />\n        <Input\n          value={confirm}\n          onChange={setConfirm}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          className=\"input\"\n        />\n        <div className=\"catcha\">\n          <ReCAPTCHA\n            sitekey=\"6LfvBrsaAAAAAEPwCjRmPaVuK7s8QNP5YLN8h5-W\"\n            onChange={handleVerify}\n            theme=\"dark\"\n          />\n        </div>\n\n        <Button className=\"auth-button\" name=\"Sign up\" />\n      </form>\n      <div className=\"swap\">\n        Already have an account? <Link to=\"/login\">Log In</Link>{\" \"}\n      </div>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/Questions.tsx",["111","112","113","114"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport desktopBG from \"../assets/backround/desktop.png\";\nimport Img from \"../components/Img\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { get, post } from \"../utils/requests\";\nimport { Nullable, QuestionType, RegionType, User } from \"../utils/types\";\n\nexport default function Home(): ReactElement {\n  const auth = useAuth();\n\n  const [userDetails, setuserDetails] = useState<Nullable<User> | any>(null);\n  const [leftTab, setleftTab] = useState<boolean>(true);\n  const [currentRegion, setcurrentRegion] = useState<\n    Nullable<RegionType> | any\n  >(null);\n  const [curindex, setcurindex] = useState<number>(0);\n  const [question, setQuestion] = useState<Nullable<QuestionType> | any>();\n  const [hints, setHints] = useState<Array<string>>([]);\n  const [attempts, setAttempts] = useState<Array<string>>([]);\n  const [answer, setAnswer] = useState<string>(\"\");\n\n  const fetchQuestion = async () => {\n    try {\n      await get(`/questions/${userDetails.regions[curindex].regionid}`).then(\n        (data) => {\n          let ques = data.question;\n          setQuestion(ques);\n          setAttempts(data.attempts);\n          setHints(data.question.hints);\n        }\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    console.log(auth?.user);\n    setuserDetails(auth?.user);\n    if (auth?.user?.lastUnlockedIndex)\n      setcurindex(auth?.user?.lastUnlockedIndex);\n    fetchQuestion();\n  }, []);\n\n  const handleSubmit = async (\n    event: React.FormEvent<HTMLFormElement>\n  ): Promise<any> => {\n    event.preventDefault();\n    try {\n      await post(`questions/submit/${question._id}`, {\n        answer,\n      }).then((data) => console.log(data));\n    } catch (err) {\n      throw err;\n    }\n    setAnswer(\"\");\n  };\n\n  return (\n    <div className=\"question-page\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <div className=\"region-display\">\n        <span style={{ float: \"left\" }}>\\</span>\n        <span>region</span>\n        <span style={{ float: \"right\" }}>ic</span>\n      </div>\n      <div className=\"three-containers\">\n        <div className=\"con-1\">\n          <p className=\"headers\">Hints</p>\n          {hints && hints.length != 0 ? (\n            <div>\n              {hints.map((hint, ind) => {\n                return <p key={ind}>{hint}</p>;\n              })}\n            </div>\n          ) : (\n            <div>iecse logo</div>\n          )}\n        </div>\n        <div className=\"con-2\">\n          <p className=\"headers\">Level {question.level}</p>\n          <p>{question.text}</p>\n          <div>\n            <form onSubmit={handleSubmit} id=\"answer\">\n              <input type=\"text\" onChange={(e) => setAnswer(e.target.value)} />\n              <button form=\"answer\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n        <div className=\"con-3\">\n          {leftTab ? (\n            <p className=\"headers\">\n              Attempts <span onClick={() => setleftTab(false)}>| Stats</span>\n            </p>\n          ) : (\n            <p className=\"headers\">\n              <span onClick={() => setleftTab(true)}>Attempts |</span> Stats\n            </p>\n          )}\n          {leftTab ? (\n            <div>\n              {attempts.map((att, ind) => {\n                return <p key={ind}>{att}</p>;\n              })}\n            </div>\n          ) : (\n            <>\n              <div>\n                <p>Leading : 10</p>\n                <p>Trailing : 1001</p>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/auth/ResetPassword.tsx",["115","116","117","118","119","120","121","122","123"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Button from \"../../components/Button\";\nimport Img from \"../../components/Img\";\nimport Input from \"../../components/Input\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function ResetPassword({}: Props): ReactElement {\n  const [password, setPassword, resetPassword] = useInputState();\n  const [confirm, setConfirm, resetConfirm] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [banned, setBanned] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!password) errors.push(\"Password is required\");\n    if (password !== confirm) errors.push(\"Passwords do not match\");\n\n    if (errors.length === 0) {\n      try {\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <div className=\"auth-page login forgot\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Reset Password</h2>\n      {errors.map((err: string) => {\n        return <div className=\"error\">{err}</div>;\n      })}\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={password}\n          onChange={setPassword}\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"input\"\n        />\n        <Input\n          value={confirm}\n          onChange={setConfirm}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          className=\"input\"\n        />\n        <Button className=\"auth-button\" name=\"Submit\" />\n      </form>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/Admin.tsx",["124","125","126","127","128"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport { get, post ,put} from \"../utils/requests\";\nimport { QuestionType } from \"../utils/types\";\n\nexport default function AdminPage(): ReactElement {\n    const [questions , setQuestions] = useState([\n      {\n        \"hints\": [\n            \"hint 1 \",\n            \"this 2 \",\n            \"this hint 3\"\n        ],\n        \"keywords\": [\n            \"hi\",\n            \"hello\",\n            \"bye\"\n        ],\n        \"_id\": \"609ab5ccecfe7900296906ae\",\n        \"text\": \"some ques111\",\n        \"answer\": \"answer111\",\n        \"level\": 5,\n        \"region\": \"609ab4cfecfe7900296906ad\",\n        \"__v\": 0\n    },\n    {\n      \"hints\": [\n          \"hint 111111 \",\n          \"this 2 \",\n          \"this hint 3\"\n      ],\n      \"keywords\": [\n          \"hi\",\n          \"hello\",\n          \"bye\"\n      ],\n      \"_id\": \"609ab5ccecfe7900296906ae\",\n      \"text\": \"some ques222\",\n      \"answer\": \"answe22222r\",\n      \"level\": 5,\n      \"region\": \"609ab4cfecfe7900296906ad\",\n      \"__v\": 0\n  }\n    ]);\n    const [leaderboard, setLeaderboard] = useState([]);\n    \n    \n    const fetchLeaderboard = async () => {\n        try {\n          await get(\"/leaderboard\").then(setLeaderboard);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      useEffect(() => {\n        fetchLeaderboard();\n        fetchQuestions();\n\n      }, [leaderboard , questions])\n\n      const fetchQuestions = async () => {\n        try {\n          await get(\"/questions\").then(setQuestions);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n\n    const [edit , setEdit] = useState<boolean>(false);\n\n  return <div className=\"admin\">\n    <p onClick={() => {setEdit(!edit)}}>Add a questiondd</p>\n    {edit && <AdminAddQuestion />}\n    {questions.map((question , index) => {\n    return(\n      <AdminQuestion question={question} key={index} />\n    );\n    })}\n    \n  </div>;\n}\n\n\ninterface QuestionsProps{\n  question : QuestionType,\n}\n\n\n\n\nfunction AdminQuestion(questionobj: any ):ReactElement<QuestionsProps> {\n  const[expand , setExpand] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<any> => {\n    event.preventDefault();\n    console.log(\"from handle sunb\");\n    try {\n      await put(`/questions/add/${quesID}`, {\n        text,\n        answer,\n        hints,\n        keywords,\n        level,\n        region,\n      });\n    } catch (err) {\n      throw err;\n    }\n };\n const[quesID , setquesID] = useState<string>('');\nconst [text , setText] = useState<string>('');\n    const [answer , setAnswer] = useState<string>('');\n    const [hints , setHints] = useState<Array<string>>([]);\n    const[keywords , setKeywords] = useState<Array<string>>([]);\n    const [level , setLevel] = useState<number>();\n    const[region , setRegions] = useState('');\n\n    useEffect(() => {\n      setText(questionobj.question.text);\n      setAnswer(questionobj.question.answer);\n      setHints(questionobj.question.hints);\n      setLevel(questionobj.question.level);\n      setKeywords(questionobj.question.keywords);\n      setquesID(questionobj.question._id);\n      setRegions(questionobj.question.region);\n      console.log(hints[0]);\n    }, [])\n\n    const updateHint= (index:number) => (event : React.ChangeEvent<HTMLInputElement>)  => {\n      const newArr : string[] = [...hints];\n  \n      newArr[index] = event.target.value; \n  \n      setHints(newArr); \n  }\n\n  return(\n    <div >\n      <span onClick={() => {setExpand(!expand)}}>{text}   </span>\n      {\n      expand && <div style={{width: \"20px\"}}>\n     <form  id=\"updateQues\" style={{    display: \"grid\"}} onSubmit={handleSubmit}>\n      <label htmlFor=\"ques\">Text</label>\n      <input id=\"ques\" value={text} onChange={(e) => setText(e.target.value)}/>\n      <label htmlFor=\"answer\">answer</label>\n      <input id=\"answer\" value={answer} onChange={(e) => setAnswer(e.target.value)}/>\n      {hints.map((hint , ind) =>{\n        return(\n          <>\n          <label htmlFor={\"hint\"+ind}>hint{ind+1}</label>\n          <input id={\"hint\"+ind} value={hint} onChange={updateHint(ind)}/> \n          \n          </>\n        );\n      })}\n      <label htmlFor=\"keywords\">keywords</label>\n      <input id=\"keywords\" />\n      <label htmlFor=\"level\">level</label>\n      <input id=\"level\" value={level}  onChange={(e) => setLevel(Number(e.target.value))} />\n      <button type=\"submit\" form=\"updateQues\" value=\"Submit\">Submit</button>\n      <label htmlFor=\"regionname\">regionname</label>\n      <input id=\"regionname\" />\n      <label htmlFor=\"regiondesc\">regiondesc</label>\n      <input id=\"regiondesc\" />\n     </form>\n    </div>\n    }\n    </div>\n  );\n}\n\n\n\n\n function AdminAddQuestion(): ReactElement {\n\n  const[quesID , setquesID] = useState<string>('');\n  const [text , setText] = useState<string>('');\n      const [answer , setAnswer] = useState<string>('');\n      const [hints , setHints] = useState<Array<string>>([]);\n      const[keywords , setKeywords] = useState<Array<string>>([]);\n      const [level , setLevel] = useState<number>();\n      const[region , setRegions] = useState('');\n\n      const updateHint= (index:number) => (event : React.ChangeEvent<HTMLInputElement>)  => {\n        const newArr : string[] = [...hints];\n    \n        newArr[index] = event.target.value; \n    \n        setHints(newArr); \n    }\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<any> => {\n      event.preventDefault();\n      console.log(\"from handle sunb\");\n      try {\n        await put(`/questions/add/${quesID}`, {\n          text,\n          answer,\n          hints,\n          keywords,\n          level,\n          region,\n        });\n      } catch (err) {\n        throw err;\n      }\n   };\n\n   return(\n     <div>\n       <div style={{width: \"20px\"}}>\n     <form  id=\"updateQues\" style={{    display: \"grid\"}} onSubmit={handleSubmit}>\n      <label htmlFor=\"ques\">Text</label>\n      <input id=\"ques\" value={text} onChange={(e) => setText(e.target.value)}/>\n      <label htmlFor=\"answer\">answer</label>\n      <input id=\"answer\" value={answer} onChange={(e) => setAnswer(e.target.value)}/>\n      {hints.map((hint , ind) =>{\n        return(\n          <>\n          <label htmlFor={\"hint\"+ind}>hint{ind+1}</label>\n          <input id={\"hint\"+ind} value={hint} onChange={updateHint(ind)}/> \n          \n          </>\n        );\n      })}\n      <label htmlFor=\"keywords\">keywords</label>\n      <input id=\"keywords\" />\n      <label htmlFor=\"level\">level</label>\n      <input id=\"level\" value=\"{level}\"  onChange={(e) => setLevel(Number(e.target.value))} />\n      <button type=\"submit\" form=\"updateQues\" value=\"Submit\">Submit</button>\n      <label htmlFor=\"regionname\">regionname</label>\n      <input id=\"regionname\" />\n      <label htmlFor=\"regiondesc\">regiondesc</label>\n      <input id=\"regiondesc\" />\n     </form>\n    </div>\n     </div>\n   );\n }","/usr/src/client/src/components/Loading.tsx",[],"/usr/src/client/src/pages/Landing.tsx",[],"/usr/src/client/src/hooks/useInputState.ts",[],"/usr/src/client/src/components/Img.tsx",[],"/usr/src/client/src/components/Input.tsx",[],"/usr/src/client/src/components/Button.tsx",[],{"ruleId":"129","severity":1,"message":"130","line":87,"column":6,"nodeType":"131","endLine":87,"endColumn":8,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":13,"column":40,"nodeType":"135","messageId":"136","endLine":13,"endColumn":49},{"ruleId":"137","severity":1,"message":"138","line":14,"column":27,"nodeType":"139","messageId":"140","endLine":14,"endColumn":37},{"ruleId":"137","severity":1,"message":"141","line":17,"column":10,"nodeType":"139","messageId":"140","endLine":17,"endColumn":17},{"ruleId":"137","severity":1,"message":"142","line":18,"column":10,"nodeType":"139","messageId":"140","endLine":18,"endColumn":16},{"ruleId":"137","severity":1,"message":"143","line":18,"column":18,"nodeType":"139","messageId":"140","endLine":18,"endColumn":27},{"ruleId":"137","severity":1,"message":"144","line":20,"column":11,"nodeType":"139","messageId":"140","endLine":20,"endColumn":19},{"ruleId":"137","severity":1,"message":"145","line":22,"column":9,"nodeType":"139","messageId":"140","endLine":22,"endColumn":13},{"ruleId":"133","severity":1,"message":"134","line":13,"column":31,"nodeType":"135","messageId":"136","endLine":13,"endColumn":40},{"ruleId":"137","severity":1,"message":"138","line":14,"column":27,"nodeType":"139","messageId":"140","endLine":14,"endColumn":37},{"ruleId":"137","severity":1,"message":"146","line":15,"column":33,"nodeType":"139","messageId":"140","endLine":15,"endColumn":46},{"ruleId":"137","severity":1,"message":"141","line":18,"column":10,"nodeType":"139","messageId":"140","endLine":18,"endColumn":17},{"ruleId":"137","severity":1,"message":"142","line":19,"column":10,"nodeType":"139","messageId":"140","endLine":19,"endColumn":16},{"ruleId":"133","severity":1,"message":"134","line":20,"column":34,"nodeType":"135","messageId":"136","endLine":20,"endColumn":43},{"ruleId":"137","severity":1,"message":"147","line":21,"column":25,"nodeType":"139","messageId":"140","endLine":21,"endColumn":34},{"ruleId":"137","severity":1,"message":"148","line":22,"column":33,"nodeType":"139","messageId":"140","endLine":22,"endColumn":46},{"ruleId":"137","severity":1,"message":"138","line":23,"column":27,"nodeType":"139","messageId":"140","endLine":23,"endColumn":37},{"ruleId":"137","severity":1,"message":"146","line":24,"column":33,"nodeType":"139","messageId":"140","endLine":24,"endColumn":46},{"ruleId":"137","severity":1,"message":"149","line":25,"column":31,"nodeType":"139","messageId":"140","endLine":25,"endColumn":43},{"ruleId":"137","severity":1,"message":"150","line":27,"column":10,"nodeType":"139","messageId":"140","endLine":27,"endColumn":16},{"ruleId":"137","severity":1,"message":"141","line":28,"column":10,"nodeType":"139","messageId":"140","endLine":28,"endColumn":17},{"ruleId":"137","severity":1,"message":"144","line":30,"column":11,"nodeType":"139","messageId":"140","endLine":30,"endColumn":19},{"ruleId":"137","severity":1,"message":"151","line":13,"column":10,"nodeType":"139","messageId":"140","endLine":13,"endColumn":23},{"ruleId":"137","severity":1,"message":"152","line":13,"column":25,"nodeType":"139","messageId":"140","endLine":13,"endColumn":41},{"ruleId":"129","severity":1,"message":"153","line":43,"column":6,"nodeType":"131","endLine":43,"endColumn":8,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":71,"column":34,"nodeType":"157","messageId":"136","endLine":71,"endColumn":36},{"ruleId":"137","severity":1,"message":"158","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":14},{"ruleId":"133","severity":1,"message":"134","line":13,"column":39,"nodeType":"135","messageId":"136","endLine":13,"endColumn":48},{"ruleId":"137","severity":1,"message":"146","line":14,"column":33,"nodeType":"139","messageId":"140","endLine":14,"endColumn":46},{"ruleId":"137","severity":1,"message":"149","line":15,"column":31,"nodeType":"139","messageId":"140","endLine":15,"endColumn":43},{"ruleId":"137","severity":1,"message":"141","line":18,"column":10,"nodeType":"139","messageId":"140","endLine":18,"endColumn":17},{"ruleId":"137","severity":1,"message":"142","line":19,"column":10,"nodeType":"139","messageId":"140","endLine":19,"endColumn":16},{"ruleId":"137","severity":1,"message":"143","line":19,"column":18,"nodeType":"139","messageId":"140","endLine":19,"endColumn":27},{"ruleId":"137","severity":1,"message":"144","line":21,"column":11,"nodeType":"139","messageId":"140","endLine":21,"endColumn":19},{"ruleId":"137","severity":1,"message":"145","line":23,"column":9,"nodeType":"139","messageId":"140","endLine":23,"endColumn":13},{"ruleId":"137","severity":1,"message":"159","line":2,"column":15,"nodeType":"139","messageId":"140","endLine":2,"endColumn":19},{"ruleId":"129","severity":1,"message":"160","line":128,"column":8,"nodeType":"131","endLine":128,"endColumn":10,"suggestions":"161"},{"ruleId":"137","severity":1,"message":"162","line":178,"column":18,"nodeType":"139","messageId":"140","endLine":178,"endColumn":27},{"ruleId":"137","severity":1,"message":"163","line":182,"column":24,"nodeType":"139","messageId":"140","endLine":182,"endColumn":35},{"ruleId":"137","severity":1,"message":"164","line":184,"column":22,"nodeType":"139","messageId":"140","endLine":184,"endColumn":32},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMe'. Either include it or remove the dependency array.","ArrayExpression",["165"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","@typescript-eslint/no-unused-vars","'resetEmail' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'banned' is assigned a value but never used.","'setBanned' is assigned a value but never used.","'addToast' is assigned a value but never used.","'auth' is assigned a value but never used.","'resetPassword' is assigned a value but never used.","'resetName' is assigned a value but never used.","'resetUsername' is assigned a value but never used.","'resetConfirm' is assigned a value but never used.","'errors' is assigned a value but never used.","'currentRegion' is assigned a value but never used.","'setcurrentRegion' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth?.user' and 'fetchQuestion'. Either include them or remove the dependency array.",["166"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Link' is defined but never used.","'post' is defined but never used.","React Hook useEffect has missing dependencies: 'hints', 'questionobj.question._id', 'questionobj.question.answer', 'questionobj.question.hints', 'questionobj.question.keywords', 'questionobj.question.level', 'questionobj.question.region', and 'questionobj.question.text'. Either include them or remove the dependency array. If 'setText' needs the current value of 'questionobj.question.text', you can also switch to useReducer instead of useState and read 'questionobj.question.text' in the reducer.",["167"],"'setquesID' is assigned a value but never used.","'setKeywords' is assigned a value but never used.","'setRegions' is assigned a value but never used.",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [fetchMe]",{"range":"174","text":"175"},"Update the dependencies array to be: [auth?.user, fetchQuestion]",{"range":"176","text":"177"},"Update the dependencies array to be: [hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]",{"range":"178","text":"179"},[1650,1652],"[fetchMe]",[1503,1505],"[auth?.user, fetchQuestion]",[3213,3215],"[hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]"]