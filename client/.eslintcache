[{"/usr/src/client/src/index.tsx":"1","/usr/src/client/src/App.tsx":"2","/usr/src/client/src/components/ScrollToTop.tsx":"3","/usr/src/client/src/components/ErrorBoundary.tsx":"4","/usr/src/client/src/context/AuthContext.tsx":"5","/usr/src/client/src/components/PrivateRoute.tsx":"6","/usr/src/client/src/pages/Home.tsx":"7","/usr/src/client/src/pages/auth/ForgotPassword.tsx":"8","/usr/src/client/src/utils/requests.ts":"9","/usr/src/client/src/pages/auth/Register.tsx":"10","/usr/src/client/src/pages/auth/Login.tsx":"11","/usr/src/client/src/pages/auth/ResetPassword.tsx":"12","/usr/src/client/src/pages/Questions.tsx":"13","/usr/src/client/src/pages/Admin.tsx":"14","/usr/src/client/src/pages/Landing.tsx":"15","/usr/src/client/src/components/Loading.tsx":"16","/usr/src/client/src/hooks/useInputState.ts":"17","/usr/src/client/src/components/Button.tsx":"18","/usr/src/client/src/components/Input.tsx":"19","/usr/src/client/src/components/Img.tsx":"20","/usr/src/client/src/components/HUD.tsx":"21","/usr/src/client/src/components/Shop.tsx":"22","/usr/src/client/src/components/Rulebook.tsx":"23","/usr/src/client/src/hooks/useFetch.ts":"24","/usr/src/client/src/utils/data.ts":"25","/usr/src/client/src/pages/NotFound.tsx":"26","/usr/src/client/src/components/Dropdown.tsx":"27","/usr/src/client/src/hooks/useClickOut.ts":"28"},{"size":911,"mtime":1622841507816,"results":"29","hashOfConfig":"30"},{"size":1638,"mtime":1622844023224,"results":"31","hashOfConfig":"30"},{"size":246,"mtime":1621631522665,"results":"32","hashOfConfig":"30"},{"size":951,"mtime":1620822619580,"results":"33","hashOfConfig":"30"},{"size":4075,"mtime":1622819306065,"results":"34","hashOfConfig":"30"},{"size":1096,"mtime":1622819385764,"results":"35","hashOfConfig":"30"},{"size":2397,"mtime":1622845750972,"results":"36","hashOfConfig":"30"},{"size":1851,"mtime":1621112446476,"results":"37","hashOfConfig":"30"},{"size":979,"mtime":1621116781342,"results":"38","hashOfConfig":"30"},{"size":3850,"mtime":1622738268870,"results":"39","hashOfConfig":"30"},{"size":2591,"mtime":1621112049696,"results":"40","hashOfConfig":"30"},{"size":2088,"mtime":1621112454191,"results":"41","hashOfConfig":"30"},{"size":7904,"mtime":1622844398459,"results":"42","hashOfConfig":"30"},{"size":6298,"mtime":1621542127240,"results":"43","hashOfConfig":"30"},{"size":249,"mtime":1621699405435,"results":"44","hashOfConfig":"30"},{"size":559,"mtime":1621111122226,"results":"45","hashOfConfig":"30"},{"size":447,"mtime":1620822619580,"results":"46","hashOfConfig":"30"},{"size":823,"mtime":1621886389263,"results":"47","hashOfConfig":"30"},{"size":849,"mtime":1622844557913,"results":"48","hashOfConfig":"30"},{"size":417,"mtime":1620827777035,"results":"49","hashOfConfig":"30"},{"size":1939,"mtime":1621541530417,"results":"50","hashOfConfig":"30"},{"size":2820,"mtime":1622839898687,"results":"51","hashOfConfig":"30"},{"size":415,"mtime":1621380688508,"results":"52","hashOfConfig":"30"},{"size":732,"mtime":1621630541722,"results":"53","hashOfConfig":"30"},{"size":1355,"mtime":1622839860262,"results":"54","hashOfConfig":"30"},{"size":296,"mtime":1622843589767,"results":"55","hashOfConfig":"30"},{"size":1864,"mtime":1622845777381,"results":"56","hashOfConfig":"30"},{"size":526,"mtime":1622492844703,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"1653vne",{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"61"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"61"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"61"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"61"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/usr/src/client/src/index.tsx",["128"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport Modal from 'react-modal';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ToastProvider } from 'react-toast-notifications';\nimport AuthProvider from './context/AuthContext';\nimport ScrollToTop from './components/ScrollToTop';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport HUD from './components/HUD';\n\nModal.setAppElement('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ErrorBoundary>\n        <ToastProvider\n          autoDismiss\n          autoDismissTimeout={2500}\n          placement=\"bottom-right\"\n        >\n          <AuthProvider>\n            <ScrollToTop />\n            <App />\n          </AuthProvider>\n        </ToastProvider>\n      </ErrorBoundary>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["129","130"],"/usr/src/client/src/App.tsx",["131"],"import React, { ReactElement } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PrivateRoute from './components/PrivateRoute';\nimport Home from './pages/Home';\nimport AdminPage from './pages/Admin';\nimport Login from './pages/auth/Login';\nimport Register from './pages/auth/Register';\nimport ForgotPassword from './pages/auth/ForgotPassword';\nimport ResetPassword from './pages/auth/ResetPassword';\nimport { get } from './utils/requests';\nimport Questions from './pages/Questions';\n\nimport NotFound from './pages/NotFound';\n\n//TODO\n//***Correct the fonts EVERYWHERE\n// background blur chage only for mozilla\n// Are you sure question\n// Ask Nishika about sqaure rotation in shop\n// Ask Nishika about shop background color\n// Indication shop mei when something is selected\n// Are you sure\n// Make sure HUD is in every page\n// Spread auth pages background\n// Add corners\n// HUD is breaking in Home\n\nexport default function App(): ReactElement {\n  return (\n    <React.Fragment>\n      <Switch>\n        <PrivateRoute auth path=\"/login\" component={Login} />\n        <PrivateRoute auth path=\"/register\" component={Register} />\n        <PrivateRoute\n          auth\n          path=\"/reset-password/:token\"\n          component={ResetPassword}\n        />\n        <PrivateRoute auth path=\"/forgot-password\" component={ForgotPassword} />\n        <PrivateRoute path=\"/question/:id\" component={Questions} />\n        <PrivateRoute admin exact path=\"/admin\" component={AdminPage} />\n        <PrivateRoute exact path=\"/\" component={Home} />\n        <Route path=\"**\" component={NotFound} />\n      </Switch>\n    </React.Fragment>\n  );\n}\n","/usr/src/client/src/components/ScrollToTop.tsx",[],"/usr/src/client/src/components/ErrorBoundary.tsx",[],"/usr/src/client/src/context/AuthContext.tsx",["132","133"],"import React, {\n  ReactElement,\n  useContext,\n  createContext,\n  useState,\n  useEffect,\n} from 'react';\nimport { Nullable, User, Children } from '../utils/types';\n\nimport { get, post, put } from '../utils/requests';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { useToasts } from 'react-toast-notifications';\n\ntype Value = {\n  user: Nullable<User>;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  register: (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => Promise<void>;\n  isAdmin: () => boolean;\n  loading: Boolean;\n  forgotPassword: (email: string) => Promise<void>;\n  resetPassword: (password: string, token: string) => Promise<void>;\n  fetchMe: () => Promise<void>;\n  updateUser: (userData: User) => void;\n  check: () => Promise<void>;\n  updateScore: (score: number) => void;\n  inNest: () => any;\n};\n\nconst AuthContext = createContext<Nullable<Value>>(null);\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport default function AuthProvider({ children }: Children): ReactElement {\n  const [user, setUser] = useState<Nullable<User> | any>(null);\n  const [loading, setLoading] = useState<Boolean>(true);\n\n  const location = useLocation();\n  const history = useHistory();\n\n  const { addToast } = useToasts();\n\n  const fetchMe = async () => {\n    try {\n      await get('/me').then(setUser);\n    } catch (err) {\n      logout();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        await fetchMe();\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    // setLoading(true);\n\n    try {\n      await post('/login', {\n        email,\n        password,\n      });\n\n      await fetchMe();\n\n      history.push('/');\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const register = async (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => {\n    try {\n      await post('/register', {\n        name,\n        username,\n        email,\n        password,\n      });\n\n      history.push('/login');\n      addToast('Verification Mail Sent', { appearance: 'info' });\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setUser(null);\n      setLoading(false);\n      await post('/logout');\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const forgotPassword = async (email: string) => {\n    try {\n      await post('/forgotpassword', { email });\n      addToast('Mail Sent!', { appearance: 'success' });\n    } catch (err) {\n      addToast('Something Went Wrong', { appearance: 'error' });\n    }\n  };\n\n  const resetPassword = async (password: string, token: string) => {\n    try {\n      await put(`/resetpassword/${token}`, { password });\n      history.push('/login');\n      addToast('Password Changed!', { appearance: 'success' });\n    } catch (err) {\n      addToast('Something Went Wrong', { appearance: 'error' });\n    }\n  };\n\n  const isAdmin = () => user?.role === 1;\n\n  const updateUser = (userData: User) => {\n    setUser(userData);\n  };\n\n  const check = async () => {\n    try {\n      const res = await get('/me');\n      if (!res) {\n        logout();\n        addToast('Session Timed Out', { appearance: 'error' });\n        return;\n      }\n      // else if (res.isBanned){\n\n      // }\n      setUser(res);\n      history.push('/');\n      addToast('Something Went Wrong', { appearance: 'error' });\n    } catch (err) {\n      logout();\n      addToast('Session Timed Out', { appearance: 'error' });\n    }\n  };\n\n  const updateScore = (score: number) => {\n    setUser((prev: User) => ({ ...prev, score }));\n  };\n\n  const inNest = () => user.hawksNest;\n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    isAdmin,\n    forgotPassword,\n    loading,\n    resetPassword,\n    fetchMe,\n    updateUser,\n    check,\n    updateScore,\n    inNest,\n  };\n\n  // {children}\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n","/usr/src/client/src/components/PrivateRoute.tsx",[],"/usr/src/client/src/pages/Home.tsx",["134"],"/usr/src/client/src/pages/auth/ForgotPassword.tsx",["135","136","137","138","139","140","141"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Button from \"../../components/Button\";\nimport Img from \"../../components/Img\";\nimport Input from \"../../components/Input\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function ForgotPassword({}: Props): ReactElement {\n  const [email, setEmail, resetEmail] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [banned, setBanned] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!email) errors.push(\"Email is Required\");\n\n    if (errors.length === 0) {\n      try {\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <div className=\"auth-page login forgot\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Forgot Password</h2>\n      {errors.map((err: string) => {\n        return <div className=\"error\">{err}</div>;\n      })}\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={email}\n          onChange={setEmail}\n          type=\"text\"\n          placeholder=\"Email ID\"\n          className=\"input\"\n        />\n        <div className=\"forgot\">\n          <Link to=\"/login\">Back to login</Link>\n        </div>\n        <Button className=\"auth-button\" name=\"Submit\" />\n      </form>\n    </div>\n  );\n}\n","/usr/src/client/src/utils/requests.ts",[],"/usr/src/client/src/pages/auth/Register.tsx",["142","143","144","145","146","147","148","149"],"import React, { ReactElement } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useToasts } from 'react-toast-notifications';\nimport desktopBG from '../../assets/backround/desktop.png';\nimport Button from '../../components/Button';\nimport Img from '../../components/Img';\nimport Input from '../../components/Input';\nimport { useAuth } from '../../context/AuthContext';\nimport useInputState from '../../hooks/useInputState';\n\nimport ReCAPTCHA from 'react-google-recaptcha';\n\ninterface Props {}\n\nfunction validateEmail(email: string) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport default function Register({}: Props): ReactElement {\n  const [name, setName, resetName] = useInputState();\n  const [username, setUsername, resetUsername] = useInputState();\n  const [email, setEmail, resetEmail] = useInputState();\n  const [password, setPassword, resetPassword] = useInputState();\n  const [confirm, setConfirm, resetConfirm] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const [captcha, setCaptcha] = React.useState(false);\n  const handleVerify = () => {\n    setCaptcha(true);\n  };\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!name || !username || !email || !password)\n      errors.push('All fields are required');\n    if (!validateEmail(email) && email) errors.push('Email is invalid');\n    if (password.length < 8 && password)\n      errors.push('Password must be atleast 8 Characters');\n    else if (password !== confirm) errors.push('Passwords do not match');\n    if (!captcha) errors.push('Captcha must be completed');\n\n    if (errors.length === 0) {\n      try {\n        await auth?.register(name, username, email, password);\n        setLoading(false);\n      } catch (err) {\n        setErrors([err.response.data.message]);\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  //Take phone number or something\n  return (\n    <div className=\"auth-page register\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Sign Up</h2>\n      {errors.map((err: string) => {\n        return <div className=\"error\">{err}</div>;\n      })}\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={name}\n          onChange={setName}\n          type=\"text\"\n          placeholder=\"Name\"\n          className=\"input\"\n        />\n        <Input\n          value={username}\n          onChange={setUsername}\n          type=\"text\"\n          placeholder=\"Username\"\n          className=\"input\"\n        />\n        <Input\n          value={email}\n          onChange={setEmail}\n          type=\"text\"\n          placeholder=\"Email ID\"\n          className=\"input\"\n        />\n        <Input\n          value={password}\n          onChange={setPassword}\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"input\"\n        />\n        <Input\n          value={confirm}\n          onChange={setConfirm}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          className=\"input\"\n        />\n        <div className=\"catcha\">\n          <ReCAPTCHA\n            sitekey=\"6LfvBrsaAAAAAEPwCjRmPaVuK7s8QNP5YLN8h5-W\"\n            onChange={handleVerify}\n            theme=\"dark\"\n          />\n        </div>\n\n        <Button className=\"auth-button\" name=\"Sign up\" />\n      </form>\n      <div className=\"swap\">\n        Already have an account? <Link to=\"/login\">Log In</Link>{' '}\n      </div>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/auth/Login.tsx",["150","151","152","153","154"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Button from \"../../components/Button\";\nimport Img from \"../../components/Img\";\nimport Input from \"../../components/Input\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function Login({}: Props): ReactElement {\n  const [email, setEmail, resetEmail] = useInputState();\n  const [password, setPassword, resetPassword] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [banned, setBanned] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!email) errors.push(\"Email is Required\");\n    if (!password) errors.push(\"Password is Required\");\n\n    if (errors.length === 0) {\n      try {\n        await auth?.login(email, password);\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n\n        if (err.response.data.message === \"This route is forbidden!\")\n          setBanned(true);\n\n        if (err.response.data.message === \"User not verified\")\n          addToast(\"Verification link sent to mail\");\n\n        setErrors([err.response.data.message]);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <div className=\"auth-page login\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Log in</h2>\n      <h3>Welcome back player</h3>\n      {errors.map((err: string) => {\n        return <div className=\"error\">{err}</div>;\n      })}\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={email}\n          onChange={setEmail}\n          type=\"text\"\n          placeholder=\"Email ID\"\n          className=\"input\"\n        />\n        <Input\n          value={password}\n          onChange={setPassword}\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"input\"\n        />\n        <div className=\"forgot\">\n          <Link to=\"/forgot-password\">Forgot Password?</Link>\n        </div>\n        <Button className=\"auth-button\" name=\"Login\" />\n      </form>\n      <div className=\"swap\">\n        New to hawkeye? <Link to=\"/register\">Create Account</Link>{\" \"}\n      </div>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/auth/ResetPassword.tsx",["155","156","157","158","159","160","161","162","163"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Button from \"../../components/Button\";\nimport Img from \"../../components/Img\";\nimport Input from \"../../components/Input\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function ResetPassword({}: Props): ReactElement {\n  const [password, setPassword, resetPassword] = useInputState();\n  const [confirm, setConfirm, resetConfirm] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [banned, setBanned] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const auth = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const errors: string[] = [];\n    if (!password) errors.push(\"Password is required\");\n    if (password !== confirm) errors.push(\"Passwords do not match\");\n\n    if (errors.length === 0) {\n      try {\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <div className=\"auth-page login forgot\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Reset Password</h2>\n      {errors.map((err: string) => {\n        return <div className=\"error\">{err}</div>;\n      })}\n      <form onSubmit={handleSubmit}>\n        <Input\n          value={password}\n          onChange={setPassword}\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"input\"\n        />\n        <Input\n          value={confirm}\n          onChange={setConfirm}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          className=\"input\"\n        />\n        <Button className=\"auth-button\" name=\"Submit\" />\n      </form>\n    </div>\n  );\n}\n","/usr/src/client/src/pages/Questions.tsx",["164"],"import React, { ReactElement } from 'react';\nimport { get, post } from '../utils/requests';\nimport { Link, RouteComponentProps, useHistory } from 'react-router-dom';\nimport useFetch from '../hooks/useFetch';\nimport Loading from '../components/Loading';\nimport useInputState from '../hooks/useInputState';\nimport Img from '../components/Img';\n\nimport desktopBG from '../assets/backround/desktop.png';\nimport ReactTooltip from 'react-tooltip';\nimport Button from '../components/Button';\nimport { useToasts } from 'react-toast-notifications';\nimport { useAuth } from '../context/AuthContext';\nimport HUD from '../components/HUD';\nimport { powerUps } from '../utils/data';\n\ntype TParams = { id: string };\n\nexport default function Questions({\n  match,\n}: RouteComponentProps<TParams>): ReactElement {\n  const questionFetcher = useFetch(`/questions/${match.params.id}`);\n  const [answer, setAnswer, resetAnswer] = useInputState();\n  const inventoryFetcher = useFetch(`/shop/inventory`);\n\n  const { addToast } = useToasts();\n  const history = useHistory();\n  const auth = useAuth();\n\n  const handleSubmit = async (\n    e: React.FormEvent<HTMLFormElement>\n  ): Promise<any> => {\n    e.preventDefault();\n    if (!answer) return;\n\n    try {\n      const data = await post(\n        `questions/submit/${questionFetcher.data.question._id}`,\n        {\n          attempt: answer,\n        }\n      );\n\n      if (!data.success) {\n        questionFetcher.fetch(false);\n        if (data.close) {\n          //TODO\n          resetAnswer();\n          return;\n        }\n        addToast(data.message, { appearance: 'error' });\n        resetAnswer();\n        return;\n      }\n\n      if (questionFetcher.data.question.level === 6) {\n        history.push('/');\n        addToast('New Region Unlocked!', { appearance: 'success' });\n        await auth?.fetchMe();\n        return;\n      }\n\n      addToast('Correct answer', { appearance: 'success' });\n      questionFetcher.fetch();\n      resetAnswer();\n    } catch (err) {\n      auth?.check();\n    }\n  };\n\n  if (questionFetcher.isLoading || inventoryFetcher.isLoading) {\n    return (\n      <div className=\"screen-center\">\n        <Loading />\n      </div>\n    );\n  }\n\n  // console.log(questionFetcher.data);\n\n  // console.log(JSON.parse(questionFetcher.data.question.region.colorData).color);\n\n  const handleUsePowerUp = async (id: number) => {\n    try {\n      const res = await post(`/shop/apply/${id}`, {\n        regionid: match.params.id,\n        questionid: questionFetcher.data.question._id,\n      });\n\n      if (res.success) {\n        addToast('Applied Successfully', { appearance: 'success' });\n      } else {\n        addToast('Something went wrong', { appearance: 'error' });\n      }\n    } catch (err) {\n      auth?.check();\n    }\n  };\n\n  return (\n    <div className=\"question\">\n      <HUD />\n      <Img src={desktopBG} className=\"background\" />\n      <h1>Hawkeye</h1>\n      <div className=\"top-bar\">\n        <div className=\"region\">\n          <Link to=\"/\">\n            <i className=\"fas fa-chevron-left\"></i>\n          </Link>\n          <p>{questionFetcher.data.question.region.name}</p>\n          <i className=\"fas fa-map-marker-alt marker\"></i>\n        </div>\n        <div className=\"points\">\n          <span>Reputation points : </span> {auth?.user?.score}\n        </div>\n      </div>\n      <main>\n        <Hints />\n        <form className=\"answer\" onSubmit={handleSubmit}>\n          <div className=\"top\">\n            <h2>Level {questionFetcher.data.question.level}</h2>\n            <p>{questionFetcher.data.question.text}</p>\n          </div>\n          <div className=\"bottom\">\n            <input type=\"text\" value={answer} onChange={setAnswer} />\n            <Button name=\"Submit\" />\n          </div>\n        </form>\n        <Stats\n          stats={questionFetcher.data.stats}\n          attempts={questionFetcher.data.attempts}\n        />\n      </main>\n      <BottomBar\n        refresh={() => questionFetcher.fetch(false)}\n        handleUsePowerUp={handleUsePowerUp}\n        data={inventoryFetcher.data}\n      />\n    </div>\n  );\n}\n\ninterface IStatsProps {\n  attempts: any[];\n  stats: {\n    atPar: number;\n    leading: number;\n    lagging: number;\n  };\n}\n\nfunction Stats({ attempts, stats }: IStatsProps): ReactElement {\n  const [attemptsOpen, setAttemptsOpen] = React.useState(true);\n\n  const percentage =\n    (100 / (stats.leading + stats.lagging)) * stats.lagging || 0;\n\n  return (\n    <div className=\"data\">\n      <div className=\"top\">\n        <h2\n          className={attemptsOpen ? 'active' : ''}\n          onClick={() => setAttemptsOpen(true)}\n        >\n          Attempts\n        </h2>\n        <h2\n          className={!attemptsOpen ? 'active' : ''}\n          onClick={() => setAttemptsOpen(false)}\n        >\n          Stats\n        </h2>\n      </div>\n      {attemptsOpen && (\n        <section className=\"attempts\">\n          {attempts.reverse().map((attempt: string) => {\n            return (\n              <div key={attempt} className=\"attempt\">\n                {attempt}\n              </div>\n            );\n          })}\n        </section>\n      )}\n      {!attemptsOpen && (\n        <section className=\"stats\">\n          <div className=\"graph\">\n            <div className=\"bar\">\n              <div\n                style={{\n                  transform: `translateX(${percentage}%)`,\n                }}\n                className=\"user\"\n              >\n                <i\n                  data-tip={`You are at par with ${stats.atPar} ${\n                    stats.atPar > 1 ? 'players' : 'player'\n                  }`}\n                  className=\"fas fa-user\"\n                ></i>\n              </div>\n            </div>\n            <div\n              style={{\n                transform: `translateX(${percentage}%)`,\n              }}\n              className=\"indicator\"\n            >\n              <i className=\"fas fa-sort-up\"></i>\n            </div>\n            <ReactTooltip effect=\"solid\" type=\"light\" />\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}\n\nfunction Hints(): ReactElement {\n  return (\n    <div className=\"hints\">\n      <h2>Hints</h2>\n      <section>\n        <div className=\"hint-locked\">\n          <i data-tip=\"Hint Locked\" className=\"fas fa-lock\"></i>\n        </div>\n        <div className=\"hint-locked\">\n          <i data-tip=\"Hint Locked\" className=\"fas fa-lock\"></i>\n        </div>\n        <div className=\"hint-locked\">\n          <i data-tip=\"Hint Locked\" className=\"fas fa-lock\"></i>\n        </div>\n        <ReactTooltip effect=\"solid\" type=\"light\" />\n      </section>\n    </div>\n  );\n}\n\ninterface IBottomBarProps {\n  data: any[];\n  handleUsePowerUp: (id: number) => Promise<void>;\n  refresh: () => any;\n}\n\nfunction BottomBar({\n  data,\n  handleUsePowerUp,\n  refresh,\n}: IBottomBarProps): ReactElement {\n  const [selected, setSelected] = React.useState(0);\n\n  const hasPoweUps = data.filter((powerUp: any) => powerUp.owned).length > 0;\n\n  const handleClick = () => {\n    handleUsePowerUp(selected);\n    refresh();\n  };\n\n  return (\n    <div className={!hasPoweUps ? 'bottom-bar empty-bar' : 'bottom-bar'}>\n      {!hasPoweUps && <h1 className=\"empty\">You own no power ups</h1>}\n      {hasPoweUps && (\n        <>\n          <aside>\n            {data.map((powerUp: any, index: number) => {\n              return powerUp.owned ? (\n                <div\n                  onClick={() => setSelected(powerUp.id)}\n                  key={powerUp._id}\n                  className={\n                    selected === powerUp.id\n                      ? 'square square--selected'\n                      : 'square'\n                  }\n                >\n                  <img src={powerUps[index].image} alt=\"\" />\n                </div>\n              ) : null;\n            })}\n          </aside>\n          <div className=\"right\">\n            <Button onClick={handleClick} name=\"Use\" />\n          </div>{' '}\n        </>\n      )}\n    </div>\n  );\n}\n","/usr/src/client/src/pages/Admin.tsx",["165","166","167","168","169","170"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport { get, post ,put} from \"../utils/requests\";\nimport { Nullable, QuestionType } from \"../utils/types\";\n\nexport default function AdminPage(): ReactElement {\n    \n    const [leaderboard, setLeaderboard] = useState([]);\n    const [questions, setQuestions] = useState<Nullable<QuestionType> | any>();\n    \n    const fetchLeaderboard = async () => {\n        try {\n          await get(\"/leaderboard\").then(setLeaderboard);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      useEffect(() => {\n        (async () => {\n          try {\n            await fetchQuestions();\n          } catch (err) {\n           \n          }\n        })();\n        return () => {\n          setQuestions({});\n        };\n      }, [leaderboard , questions]);\n\n      const fetchQuestions = async () => {\n        try {\n          await get(\"/questions\").then(setQuestions);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n\n    const [edit , setEdit] = useState<boolean>(false);\n\n  return <div className=\"admin\">\n    <p onClick={() => {setEdit(!edit)}}>Add a questiondd</p>\n    {edit && <AdminAddQuestion />}\n    {questions.map((question: any , index: any) => {\n    return(\n      <AdminQuestion question={question} key={index} />\n    );\n    })}\n    \n  </div>;\n}\n\n\ninterface QuestionsProps{\n  question : QuestionType,\n}\n\n\n\n\nfunction AdminQuestion(questionobj: any ):ReactElement<QuestionsProps> {\n  const[expand , setExpand] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<any> => {\n    event.preventDefault();\n    console.log(\"from handle sunb\");\n    try {\n      await put(`/questions/add/${quesID}`, {\n        text,\n        answer,\n        hints,\n        keywords,\n        level,\n        region,\n      });\n    } catch (err) {\n      throw err;\n    }\n };\n const[quesID , setquesID] = useState<string>('');\nconst [text , setText] = useState<string>('');\n    const [answer , setAnswer] = useState<string>('');\n    const [hints , setHints] = useState<Array<string>>([]);\n    const[keywords , setKeywords] = useState<Array<string>>([]);\n    const [level , setLevel] = useState<number>();\n    const[region , setRegions] = useState('');\n\n    useEffect(() => {\n      setText(questionobj.question.text);\n      setAnswer(questionobj.question.answer);\n      setHints(questionobj.question.hints);\n      setLevel(questionobj.question.level);\n      setKeywords(questionobj.question.keywords);\n      setquesID(questionobj.question._id);\n      setRegions(questionobj.question.region);\n      console.log(hints[0]);\n    }, [])\n\n    const updateHint= (index:number) => (event : React.ChangeEvent<HTMLInputElement>)  => {\n      const newArr : string[] = [...hints];\n  \n      newArr[index] = event.target.value; \n  \n      setHints(newArr); \n  }\n\n  return(\n    <div >\n      <span onClick={() => {setExpand(!expand)}}>{text}   </span>\n      {\n      expand && <div style={{width: \"20px\"}}>\n     <form  id=\"updateQues\" style={{    display: \"grid\"}} onSubmit={handleSubmit}>\n      <label htmlFor=\"ques\">Text</label>\n      <input id=\"ques\" value={text} onChange={(e) => setText(e.target.value)}/>\n      <label htmlFor=\"answer\">answer</label>\n      <input id=\"answer\" value={answer} onChange={(e) => setAnswer(e.target.value)}/>\n      {hints.map((hint , ind) =>{\n        return(\n          <>\n          <label htmlFor={\"hint\"+ind}>hint{ind+1}</label>\n          <input id={\"hint\"+ind} value={hint} onChange={updateHint(ind)}/> \n          \n          </>\n        );\n      })}\n      <label htmlFor=\"keywords\">keywords</label>\n      <input id=\"keywords\" />\n      <label htmlFor=\"level\">level</label>\n      <input id=\"level\" value={level}  onChange={(e) => setLevel(Number(e.target.value))} />\n      <button type=\"submit\" form=\"updateQues\" value=\"Submit\">Submit</button>\n      <label htmlFor=\"regionname\">regionname</label>\n      <input id=\"regionname\" />\n      <label htmlFor=\"regiondesc\">regiondesc</label>\n      <input id=\"regiondesc\" />\n     </form>\n    </div>\n    }\n    </div>\n  );\n}\n\n\n\n\n function AdminAddQuestion(): ReactElement {\n\n  const[quesID , setquesID] = useState<string>('');\n  const [text , setText] = useState<string>('');\n      const [answer , setAnswer] = useState<string>('');\n      const [hints , setHints] = useState<Array<string>>([]);\n      const[keywords , setKeywords] = useState<Array<string>>([]);\n      const [level , setLevel] = useState<number>();\n      const[region , setRegions] = useState('');\n\n      const updateHint= (index:number) => (event : React.ChangeEvent<HTMLInputElement>)  => {\n        const newArr : string[] = [...hints];\n    \n        newArr[index] = event.target.value; \n    \n        setHints(newArr); \n    }\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<any> => {\n      event.preventDefault();\n      console.log(\"from handle sunb\");\n      try {\n        await put(`/questions/add/${quesID}`, {\n          text,\n          answer,\n          hints,\n          keywords,\n          level,\n          region,\n        });\n      } catch (err) {\n        throw err;\n      }\n   };\n\n   return(\n     <div>\n       <div style={{width: \"20px\"}}>\n     <form  id=\"updateQues\" style={{    display: \"grid\"}} onSubmit={handleSubmit}>\n      <label htmlFor=\"ques\">Text</label>\n      <input id=\"ques\" value={text} onChange={(e) => setText(e.target.value)}/>\n      <label htmlFor=\"answer\">answer</label>\n      <input id=\"answer\" value={answer} onChange={(e) => setAnswer(e.target.value)}/>\n      {hints.map((hint , ind) =>{\n        return(\n          <>\n          <label htmlFor={\"hint\"+ind}>hint{ind+1}</label>\n          <input id={\"hint\"+ind} value={hint} onChange={updateHint(ind)}/> \n          \n          </>\n        );\n      })}\n      <label htmlFor=\"keywords\">keywords</label>\n      <input id=\"keywords\" />\n      <label htmlFor=\"level\">level</label>\n      <input id=\"level\" value=\"{level}\"  onChange={(e) => setLevel(Number(e.target.value))} />\n      <button type=\"submit\" form=\"updateQues\" value=\"Submit\">Submit</button>\n      <label htmlFor=\"regionname\">regionname</label>\n      <input id=\"regionname\" />\n      <label htmlFor=\"regiondesc\">regiondesc</label>\n      <input id=\"regiondesc\" />\n     </form>\n    </div>\n     </div>\n   );\n }","/usr/src/client/src/pages/Landing.tsx",["171"],"import React, { ReactElement } from \"react\";\nimport Button from \"../components/Button\";\nimport HUD from \"../components/HUD\";\n\nexport default function Landing(): ReactElement {\n  return (\n    <div className=\"landing\">\n      <HUD />\n    </div>\n  );\n}\n","/usr/src/client/src/components/Loading.tsx",[],"/usr/src/client/src/hooks/useInputState.ts",[],"/usr/src/client/src/components/Button.tsx",[],"/usr/src/client/src/components/Input.tsx",[],"/usr/src/client/src/components/Img.tsx",[],"/usr/src/client/src/components/HUD.tsx",["172"],"import React, { ReactElement } from \"react\";\nimport squareLeft from \"../assets/square-one.png\";\nimport squareRight from \"../assets/square-two.png\";\n\nimport cart from \"../assets/cart.png\";\nimport rules from \"../assets/rules.png\";\nimport { useAuth } from \"../context/AuthContext\";\nimport ReactTooltip from \"react-tooltip\";\nimport Shop from \"./Shop\";\nimport Rulebook from \"./Rulebook\";\nimport { useLocation } from \"react-router-dom\";\n\ninterface Props {}\n\nexport default function HUD({}: Props): ReactElement {\n  const auth = useAuth();\n\n  const [shopOpen, setShopOpen] = React.useState(false);\n\n  const [rulebookOpen, setRulebookOpen] = React.useState(false);\n\n  const location = useLocation();\n\n  return (\n    <div className=\"hud\">\n      {auth?.user && (\n        <div\n          onClick={() => {\n            setShopOpen(true);\n          }}\n          data-tip=\"Shop\"\n          className=\"icon icon--1\"\n        >\n          <img src={squareLeft} alt=\"\" />\n          <img src={cart} alt=\"\" className=\"logo\" />\n        </div>\n      )}\n      <ReactTooltip effect=\"solid\" type=\"light\" />\n\n      <div\n        onClick={() => {\n          setRulebookOpen(true);\n        }}\n        data-tip=\"Rulebook\"\n        className=\"icon icon--2\"\n      >\n        <img src={squareRight} alt=\"\" />\n        <img src={rules} alt=\"\" className=\"logo\" />\n      </div>\n      <ReactTooltip effect=\"solid\" type=\"light\" />\n\n      {auth?.user && location.pathname === \"/\" && (\n        <div onClick={auth?.logout} data-tip=\"Logout\" className=\"logout\">\n          <img src={squareLeft} alt=\"\" />\n          <i className=\"fas fa-power-off\"></i>\n        </div>\n      )}\n      <ReactTooltip effect=\"solid\" type=\"light\" />\n\n      <Shop\n        open={shopOpen}\n        closeHandler={() => {\n          setShopOpen(false);\n        }}\n      />\n      <Rulebook\n        open={rulebookOpen}\n        closeHandler={() => {\n          setRulebookOpen(false);\n        }}\n      />\n    </div>\n  );\n}\n","/usr/src/client/src/components/Shop.tsx",[],"/usr/src/client/src/components/Rulebook.tsx",[],"/usr/src/client/src/hooks/useFetch.ts",["173","174"],"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { get } from \"../utils/requests\";\n\nexport default (url: string, lazy = false) => {\n  const [isLoading, setIsLoading] = useState(!lazy);\n  const [error, setError] = useState<any>(null);\n  const [data, setData] = useState<any>(null);\n\n  const auth = useAuth();\n\n  const fetch = (loading = true) => {\n    setIsLoading(loading);\n    get(url)\n      .then((data: any) => {\n        setData(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setError(err);\n        auth?.check();\n      });\n  };\n\n  useEffect(() => {\n    if (!lazy) {\n      fetch();\n    }\n  }, []);\n\n  return { isLoading, error, data, fetch };\n};\n","/usr/src/client/src/utils/data.ts",[],"/usr/src/client/src/pages/NotFound.tsx",["175"],"import React, { ReactElement } from 'react';\nimport hawk from '../assets/hawk.png';\n\ninterface Props {}\n\nexport default function NotFoud({}: Props): ReactElement {\n  return (\n    <div className=\"not-found\">\n      <img src={hawk} alt=\"\" />\n      <h1>Hawk thinks you're lost</h1>\n    </div>\n  );\n}\n","/usr/src/client/src/components/Dropdown.tsx",["176"],"/usr/src/client/src/hooks/useClickOut.ts",["177"],{"ruleId":"178","severity":1,"message":"179","line":11,"column":8,"nodeType":"180","messageId":"181","endLine":11,"endColumn":11},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"178","severity":1,"message":"186","line":10,"column":10,"nodeType":"180","messageId":"181","endLine":10,"endColumn":13},{"ruleId":"178","severity":1,"message":"187","line":46,"column":9,"nodeType":"180","messageId":"181","endLine":46,"endColumn":17},{"ruleId":"188","severity":1,"message":"189","line":68,"column":6,"nodeType":"190","endLine":68,"endColumn":8,"suggestions":"191"},{"ruleId":"188","severity":1,"message":"192","line":79,"column":6,"nodeType":"190","endLine":79,"endColumn":8,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":13,"column":40,"nodeType":"196","messageId":"197","endLine":13,"endColumn":49},{"ruleId":"178","severity":1,"message":"198","line":14,"column":27,"nodeType":"180","messageId":"181","endLine":14,"endColumn":37},{"ruleId":"178","severity":1,"message":"199","line":17,"column":10,"nodeType":"180","messageId":"181","endLine":17,"endColumn":17},{"ruleId":"178","severity":1,"message":"200","line":18,"column":10,"nodeType":"180","messageId":"181","endLine":18,"endColumn":16},{"ruleId":"178","severity":1,"message":"201","line":18,"column":18,"nodeType":"180","messageId":"181","endLine":18,"endColumn":27},{"ruleId":"178","severity":1,"message":"202","line":20,"column":11,"nodeType":"180","messageId":"181","endLine":20,"endColumn":19},{"ruleId":"178","severity":1,"message":"203","line":22,"column":9,"nodeType":"180","messageId":"181","endLine":22,"endColumn":13},{"ruleId":"194","severity":1,"message":"195","line":20,"column":34,"nodeType":"196","messageId":"197","endLine":20,"endColumn":43},{"ruleId":"178","severity":1,"message":"204","line":21,"column":25,"nodeType":"180","messageId":"181","endLine":21,"endColumn":34},{"ruleId":"178","severity":1,"message":"205","line":22,"column":33,"nodeType":"180","messageId":"181","endLine":22,"endColumn":46},{"ruleId":"178","severity":1,"message":"198","line":23,"column":27,"nodeType":"180","messageId":"181","endLine":23,"endColumn":37},{"ruleId":"178","severity":1,"message":"206","line":24,"column":33,"nodeType":"180","messageId":"181","endLine":24,"endColumn":46},{"ruleId":"178","severity":1,"message":"207","line":25,"column":31,"nodeType":"180","messageId":"181","endLine":25,"endColumn":43},{"ruleId":"178","severity":1,"message":"199","line":28,"column":10,"nodeType":"180","messageId":"181","endLine":28,"endColumn":17},{"ruleId":"178","severity":1,"message":"202","line":30,"column":11,"nodeType":"180","messageId":"181","endLine":30,"endColumn":19},{"ruleId":"194","severity":1,"message":"195","line":13,"column":31,"nodeType":"196","messageId":"197","endLine":13,"endColumn":40},{"ruleId":"178","severity":1,"message":"198","line":14,"column":27,"nodeType":"180","messageId":"181","endLine":14,"endColumn":37},{"ruleId":"178","severity":1,"message":"206","line":15,"column":33,"nodeType":"180","messageId":"181","endLine":15,"endColumn":46},{"ruleId":"178","severity":1,"message":"199","line":18,"column":10,"nodeType":"180","messageId":"181","endLine":18,"endColumn":17},{"ruleId":"178","severity":1,"message":"200","line":19,"column":10,"nodeType":"180","messageId":"181","endLine":19,"endColumn":16},{"ruleId":"178","severity":1,"message":"208","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":14},{"ruleId":"194","severity":1,"message":"195","line":13,"column":39,"nodeType":"196","messageId":"197","endLine":13,"endColumn":48},{"ruleId":"178","severity":1,"message":"206","line":14,"column":33,"nodeType":"180","messageId":"181","endLine":14,"endColumn":46},{"ruleId":"178","severity":1,"message":"207","line":15,"column":31,"nodeType":"180","messageId":"181","endLine":15,"endColumn":43},{"ruleId":"178","severity":1,"message":"199","line":18,"column":10,"nodeType":"180","messageId":"181","endLine":18,"endColumn":17},{"ruleId":"178","severity":1,"message":"200","line":19,"column":10,"nodeType":"180","messageId":"181","endLine":19,"endColumn":16},{"ruleId":"178","severity":1,"message":"201","line":19,"column":18,"nodeType":"180","messageId":"181","endLine":19,"endColumn":27},{"ruleId":"178","severity":1,"message":"202","line":21,"column":11,"nodeType":"180","messageId":"181","endLine":21,"endColumn":19},{"ruleId":"178","severity":1,"message":"203","line":23,"column":9,"nodeType":"180","messageId":"181","endLine":23,"endColumn":13},{"ruleId":"178","severity":1,"message":"186","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":13},{"ruleId":"178","severity":1,"message":"209","line":2,"column":15,"nodeType":"180","messageId":"181","endLine":2,"endColumn":19},{"ruleId":"178","severity":1,"message":"210","line":10,"column":11,"nodeType":"180","messageId":"181","endLine":10,"endColumn":27},{"ruleId":"188","severity":1,"message":"211","line":98,"column":8,"nodeType":"190","endLine":98,"endColumn":10,"suggestions":"212"},{"ruleId":"178","severity":1,"message":"213","line":148,"column":18,"nodeType":"180","messageId":"181","endLine":148,"endColumn":27},{"ruleId":"178","severity":1,"message":"214","line":152,"column":24,"nodeType":"180","messageId":"181","endLine":152,"endColumn":35},{"ruleId":"178","severity":1,"message":"215","line":154,"column":22,"nodeType":"180","messageId":"181","endLine":154,"endColumn":32},{"ruleId":"178","severity":1,"message":"216","line":2,"column":8,"nodeType":"180","messageId":"181","endLine":2,"endColumn":14},{"ruleId":"194","severity":1,"message":"195","line":15,"column":29,"nodeType":"196","messageId":"197","endLine":15,"endColumn":38},{"ruleId":"217","severity":1,"message":"218","line":5,"column":1,"nodeType":"219","endLine":32,"endColumn":3},{"ruleId":"188","severity":1,"message":"220","line":29,"column":6,"nodeType":"190","endLine":29,"endColumn":8,"suggestions":"221"},{"ruleId":"194","severity":1,"message":"195","line":6,"column":33,"nodeType":"196","messageId":"197","endLine":6,"endColumn":42},{"ruleId":"188","severity":1,"message":"222","line":34,"column":6,"nodeType":"190","endLine":34,"endColumn":8,"suggestions":"223"},{"ruleId":"188","severity":1,"message":"224","line":22,"column":6,"nodeType":"190","endLine":22,"endColumn":11,"suggestions":"225"},"@typescript-eslint/no-unused-vars","'HUD' is defined but never used.","Identifier","unusedVar","no-native-reassign",["226"],"no-negated-in-lhs",["227"],"'get' is defined but never used.","'location' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMe'. Either include it or remove the dependency array.","ArrayExpression",["228"],"React Hook React.useEffect has missing dependencies: 'auth?.user?.lastUnlockedIndex' and 'auth?.user?.regions'. Either include them or remove the dependency array.",["229"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'resetEmail' is assigned a value but never used.","'loading' is assigned a value but never used.","'banned' is assigned a value but never used.","'setBanned' is assigned a value but never used.","'addToast' is assigned a value but never used.","'auth' is assigned a value but never used.","'resetName' is assigned a value but never used.","'resetUsername' is assigned a value but never used.","'resetPassword' is assigned a value but never used.","'resetConfirm' is assigned a value but never used.","'Link' is defined but never used.","'post' is defined but never used.","'fetchLeaderboard' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hints', 'questionobj.question._id', 'questionobj.question.answer', 'questionobj.question.hints', 'questionobj.question.keywords', 'questionobj.question.level', 'questionobj.question.region', and 'questionobj.question.text'. Either include them or remove the dependency array. If 'setText' needs the current value of 'questionobj.question.text', you can also switch to useReducer instead of useState and read 'questionobj.question.text' in the reducer.",["230"],"'setquesID' is assigned a value but never used.","'setKeywords' is assigned a value but never used.","'setRegions' is assigned a value but never used.","'Button' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'fetch' and 'lazy'. Either include them or remove the dependency array.",["231"],"React Hook React.useEffect has missing dependencies: 'defaultIndex', 'options', and 'setter'. Either include them or remove the dependency array. If 'setter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["232"],"React Hook useEffect has missing dependencies: 'insidehandler' and 'outsideHandler'. Either include them or remove the dependency array. If 'outsideHandler' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["233"],"no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},"Update the dependencies array to be: [fetchMe]",{"range":"246","text":"247"},"Update the dependencies array to be: [auth?.user?.lastUnlockedIndex, auth?.user?.regions]",{"range":"248","text":"249"},"Update the dependencies array to be: [hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]",{"range":"250","text":"251"},"Update the dependencies array to be: [fetch, lazy]",{"range":"252","text":"253"},"Update the dependencies array to be: [defaultIndex, options, setter]",{"range":"254","text":"255"},"Update the dependencies array to be: [insidehandler, outsideHandler, ref]",{"range":"256","text":"257"},[1642,1644],"[fetchMe]",[1946,1948],"[auth?.user?.lastUnlockedIndex, auth?.user?.regions]",[2640,2642],"[hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]",[679,681],"[fetch, lazy]",[705,707],"[defaultIndex, options, setter]",[516,521],"[insidehandler, outsideHandler, ref]"]