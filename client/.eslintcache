[{"/usr/src/client/src/index.tsx":"1","/usr/src/client/src/App.tsx":"2","/usr/src/client/src/context/AuthContext.tsx":"3","/usr/src/client/src/components/ErrorBoundary.tsx":"4","/usr/src/client/src/components/ScrollToTop.tsx":"5","/usr/src/client/src/components/PrivateRoute.tsx":"6","/usr/src/client/src/utils/requests.ts":"7","/usr/src/client/src/pages/Home.tsx":"8","/usr/src/client/src/pages/Landing.tsx":"9","/usr/src/client/src/components/Loading.tsx":"10"},{"size":747,"mtime":1620316772510,"results":"11","hashOfConfig":"12"},{"size":430,"mtime":1620316772490,"results":"13","hashOfConfig":"12"},{"size":2724,"mtime":1620316772506,"results":"14","hashOfConfig":"12"},{"size":951,"mtime":1620316772506,"results":"15","hashOfConfig":"12"},{"size":287,"mtime":1620316772506,"results":"16","hashOfConfig":"12"},{"size":807,"mtime":1620316772506,"results":"17","hashOfConfig":"12"},{"size":1002,"mtime":1620316772510,"results":"18","hashOfConfig":"12"},{"size":134,"mtime":1620316772510,"results":"19","hashOfConfig":"12"},{"size":140,"mtime":1620316772510,"results":"20","hashOfConfig":"12"},{"size":559,"mtime":1620316772506,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vg41ic",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/usr/src/client/src/index.tsx",[],"/usr/src/client/src/App.tsx",["44"],"import React, { ReactElement } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Home from \"./pages/Home\";\n\nexport default function App(): ReactElement {\n  return (\n    <React.Fragment>\n      <Switch>\n        <PrivateRoute exact path=\"/\" component={Home} />\n        {/* <Route path=\"*\" component={Home} /> */}\n      </Switch>\n    </React.Fragment>\n  );\n}\n","/usr/src/client/src/context/AuthContext.tsx",["45"],"import {\n  ReactElement,\n  useContext,\n  createContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { Nullable, User, Children } from \"../utils/types\";\n\nimport { get, post } from \"../utils/requests\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\n\ntype Value = {\n  user: any;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => Promise<void>;\n  loading: Boolean;\n  fetchMe: () => Promise<any>;\n  check: () => Promise<any>;\n};\n\nconst AuthContext = createContext<Nullable<Value>>(null);\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport default function AuthProvider({ children }: Children): ReactElement {\n  const [user, setUser] = useState<Nullable<User>>(null);\n  const [loading, setLoading] = useState<Boolean>(true);\n\n  const history = useHistory();\n\n  const { addToast } = useToasts();\n\n  const fetchMe = async () => {\n    try {\n      await get(\"/me\").then(setUser);\n    } catch (err) {\n      logout();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        await fetchMe();\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    // setLoading(true);\n\n    try {\n      await post(\"/login\", {\n        email,\n        password,\n      });\n\n      await fetchMe();\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const register = async (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => {\n    try {\n      await post(\"/register\", {\n        name,\n        username,\n        email,\n        password,\n      });\n\n      history.push(\"/login\");\n      addToast(\"Verification Mail Sent\", { appearance: \"info\" });\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setUser(null);\n      setLoading(false);\n      await post(\"/logout\");\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const check = async () => {\n    try {\n      const res = await get(\"/me\");\n      if (!res) {\n        logout();\n        addToast(\"Session Timed Out\", { appearance: \"error\" });\n        return;\n      }\n      setUser(res);\n      history.push(\"/\");\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    } catch (err) {\n      logout();\n      addToast(\"Session Timed Out\", { appearance: \"error\" });\n    }\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    loading,\n    fetchMe,\n    check,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n","/usr/src/client/src/components/ErrorBoundary.tsx",[],"/usr/src/client/src/components/ScrollToTop.tsx",[],"/usr/src/client/src/components/PrivateRoute.tsx",[],"/usr/src/client/src/utils/requests.ts",[],"/usr/src/client/src/pages/Home.tsx",[],"/usr/src/client/src/pages/Landing.tsx",[],"/usr/src/client/src/components/Loading.tsx",[],{"ruleId":"46","severity":1,"message":"47","line":2,"column":18,"nodeType":"48","messageId":"49","endLine":2,"endColumn":23},{"ruleId":"50","severity":1,"message":"51","line":61,"column":6,"nodeType":"52","endLine":61,"endColumn":8,"suggestions":"53"},"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMe'. Either include it or remove the dependency array.","ArrayExpression",["54"],{"desc":"55","fix":"56"},"Update the dependencies array to be: [fetchMe]",{"range":"57","text":"58"},[1322,1324],"[fetchMe]"]