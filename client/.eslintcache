[{"/usr/src/client/src/index.tsx":"1","/usr/src/client/src/components/ScrollToTop.tsx":"2","/usr/src/client/src/components/ErrorBoundary.tsx":"3","/usr/src/client/src/App.tsx":"4","/usr/src/client/src/context/AuthContext.tsx":"5","/usr/src/client/src/utils/requests.ts":"6","/usr/src/client/src/components/PrivateRoute.tsx":"7","/usr/src/client/src/pages/Home.tsx":"8","/usr/src/client/src/pages/Admin.tsx":"9","/usr/src/client/src/pages/auth/Register.tsx":"10","/usr/src/client/src/pages/auth/Login.tsx":"11","/usr/src/client/src/components/Loading.tsx":"12","/usr/src/client/src/hooks/useInputState.ts":"13","/usr/src/client/src/components/Img.tsx":"14","/usr/src/client/src/pages/Landing.tsx":"15"},{"size":747,"mtime":1620316772510,"results":"16","hashOfConfig":"17"},{"size":287,"mtime":1620316772506,"results":"18","hashOfConfig":"17"},{"size":951,"mtime":1620316772506,"results":"19","hashOfConfig":"17"},{"size":713,"mtime":1620833755190,"results":"20","hashOfConfig":"17"},{"size":4072,"mtime":1620833755198,"results":"21","hashOfConfig":"17"},{"size":1002,"mtime":1620316772510,"results":"22","hashOfConfig":"17"},{"size":890,"mtime":1620833755198,"results":"23","hashOfConfig":"17"},{"size":134,"mtime":1620316772510,"results":"24","hashOfConfig":"17"},{"size":6974,"mtime":1620833755198,"results":"25","hashOfConfig":"17"},{"size":1535,"mtime":1620833755198,"results":"26","hashOfConfig":"17"},{"size":1334,"mtime":1620833755198,"results":"27","hashOfConfig":"17"},{"size":559,"mtime":1620316772506,"results":"28","hashOfConfig":"17"},{"size":447,"mtime":1620316772510,"results":"29","hashOfConfig":"17"},{"size":417,"mtime":1620833755198,"results":"30","hashOfConfig":"17"},{"size":140,"mtime":1620316772510,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yftbs7",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/usr/src/client/src/index.tsx",[],"/usr/src/client/src/components/ScrollToTop.tsx",[],"/usr/src/client/src/components/ErrorBoundary.tsx",[],"/usr/src/client/src/App.tsx",[],"/usr/src/client/src/context/AuthContext.tsx",["66"],"import React, {\n  ReactElement,\n  useContext,\n  createContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { Nullable, User, Children } from \"../utils/types\";\n\n \n\nimport { get, post, put } from \"../utils/requests\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\n \n\nimport { useToasts } from \"react-toast-notifications\";\n\n \n\ntype Value = {\n  user: Nullable<User>;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  register: (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => Promise<void>;\n  isAdmin: () => boolean;\n  loading: Boolean;\n  isCurrentUserProfile: () => boolean;\n  forgotPassword: (email: string) => Promise<void>;\n  resetPassword: (password: string, token: string) => Promise<void>;\n  fetchMe: () => Promise<void>;\n  updateUser: (userData: User) => void;\n  check: () => Promise<void>;\n};\n\n \n\nconst AuthContext = createContext<Nullable<Value>>(null);\n\n \n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\n \n\nexport default function AuthProvider({ children }: Children): ReactElement {\n  const [user, setUser] = useState<Nullable<User> | any>(null);\n  const [loading, setLoading] = useState<Boolean>(true);\n\n \n\n  const location = useLocation();\n  const history = useHistory();\n\n \n\n  const { addToast } = useToasts();\n\n \n\n  const fetchMe = async () => {\n    try {\n      await get(\"/me\").then(setUser);\n    } catch (err) {\n      logout();\n    }\n  };\n\n \n\n  useEffect(() => {\n    (async () => {\n      try {\n        await fetchMe();\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n \n\n  const login = async (email: string, password: string) => {\n    // setLoading(true);\n\n \n\n    try {\n      await post(\"/login\", {\n        email,\n        password,\n      });\n\n \n\n      await fetchMe();\n    } catch (err) {\n      throw err;\n    }\n  };\n\n \n\n  const register = async (\n    name: string,\n    username: string,\n    email: string,\n    password: string\n  ) => {\n    try {\n      await post(\"/register\", {\n        name,\n        username,\n        email,\n        password,\n      });\n\n \n\n      history.push(\"/login\");\n      addToast(\"Verification Mail Sent\", { appearance: \"info\" });\n    } catch (err) {\n      throw err;\n    }\n  };\n\n \n\n  const logout = async () => {\n    try {\n      setUser(null);\n      setLoading(false);\n      await post(\"/logout\");\n    } catch (err) {\n      throw err;\n    }\n  };\n\n \n\n  const isCurrentUserProfile = () =>\n    location.pathname.split(\"/\").slice(-1)[0] === user?._id ||\n    location.pathname.split(\"/\").slice(-2)[0] === user?._id;\n\n \n\n  const forgotPassword = async (email: string) => {\n    try {\n      await post(\"/forgotpassword\", { email });\n      addToast(\"Mail Sent!\", { appearance: \"success\" });\n    } catch (err) {\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    }\n  };\n\n \n\n  const resetPassword = async (password: string, token: string) => {\n    try {\n      await put(`/resetpassword/${token}`, { password });\n      history.push(\"/login\");\n      addToast(\"Password Changed!\", { appearance: \"success\" });\n    } catch (err) {\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    }\n  };\n\n \n\n  const isAdmin = () => user?.role === 1;\n\n \n\n  const updateUser = (userData: User) => {\n    setUser(userData);\n  };\n\n \n\n  const check = async () => {\n    try {\n      const res = await get(\"/me\");\n      if (!res) {\n        logout();\n        addToast(\"Session Timed Out\", { appearance: \"error\" });\n        return;\n      }\n      setUser(res);\n      history.push(\"/\");\n      addToast(\"Something Went Wrong\", { appearance: \"error\" });\n    } catch (err) {\n      logout();\n      addToast(\"Session Timed Out\", { appearance: \"error\" });\n    }\n  };\n\n \n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    isAdmin,\n    forgotPassword,\n    loading,\n    isCurrentUserProfile,\n    resetPassword,\n    fetchMe,\n    updateUser,\n    check,\n  };\n\n \n\n  // {children}\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}","/usr/src/client/src/utils/requests.ts",[],"/usr/src/client/src/components/PrivateRoute.tsx",[],"/usr/src/client/src/pages/Home.tsx",[],"/usr/src/client/src/pages/Admin.tsx",["67","68","69","70","71"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport { get, post ,put} from \"../utils/requests\";\n\nexport default function AdminPage(): ReactElement {\n    const [questions , setQuestions] = useState([\n      {\n        \"hints\": [\n            \"hint 1 \",\n            \"this 2 \",\n            \"this hint 3\"\n        ],\n        \"keywords\": [\n            \"hi\",\n            \"hello\",\n            \"bye\"\n        ],\n        \"_id\": \"609ab5ccecfe7900296906ae\",\n        \"text\": \"some ques111\",\n        \"answer\": \"answer111\",\n        \"level\": 5,\n        \"region\": \"609ab4cfecfe7900296906ad\",\n        \"__v\": 0\n    },\n    {\n      \"hints\": [\n          \"hint 111111 \",\n          \"this 2 \",\n          \"this hint 3\"\n      ],\n      \"keywords\": [\n          \"hi\",\n          \"hello\",\n          \"bye\"\n      ],\n      \"_id\": \"609ab5ccecfe7900296906ae\",\n      \"text\": \"some ques222\",\n      \"answer\": \"answe22222r\",\n      \"level\": 5,\n      \"region\": \"609ab4cfecfe7900296906ad\",\n      \"__v\": 0\n  }\n    ]);\n    const [leaderboard, setLeaderboard] = useState([]);\n    \n    \n    const fetchLeaderboard = async () => {\n        try {\n          await get(\"/leaderboard\").then(setLeaderboard);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      useEffect(() => {\n        fetchLeaderboard();\n        fetchQuestions();\n\n      }, [leaderboard , questions])\n\n      const fetchQuestions = async () => {\n        try {\n          await get(\"/questions\").then(setQuestions);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n\n    const [edit , setEdit] = useState<boolean>(false);\n\n  return <div className=\"admin\">\n    <p onClick={() => {setEdit(!edit)}}>Add a questiondd</p>\n    {edit && <AdminAddQuestion />}\n    {questions.map((question , index) => {\n    return(\n      <AdminQuestion question={question} key={index} />\n    );\n    })}\n    \n  </div>;\n}\n\n\ninterface QuestionsProps{\n  question : QuestionsType,\n}\n\ntype QuestionsType = {\n  hints: Array<string>, \nkeywords: Array<string>,\n_id: string,\ntext: string,\nanswer: string,\nlevel: number,\nregion: string,\n};\n\n\nfunction AdminQuestion(questionobj: any ):ReactElement<QuestionsProps> {\n  const[expand , setExpand] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<any> => {\n    event.preventDefault();\n    console.log(\"from handle sunb\");\n    try {\n      await put(`/questions/add/${quesID}`, {\n        text,\n        answer,\n        hints,\n        keywords,\n        level,\n        region,\n      });\n    } catch (err) {\n      throw err;\n    }\n };\n const[quesID , setquesID] = useState<string>('');\nconst [text , setText] = useState<string>('');\n    const [answer , setAnswer] = useState<string>('');\n    const [hints , setHints] = useState<Array<string>>([]);\n    const[keywords , setKeywords] = useState<Array<string>>([]);\n    const [level , setLevel] = useState<number>();\n    const[region , setRegions] = useState('');\n\n    useEffect(() => {\n      setText(questionobj.question.text);\n      setAnswer(questionobj.question.answer);\n      setHints(questionobj.question.hints);\n      setLevel(questionobj.question.level);\n      setKeywords(questionobj.question.keywords);\n      setquesID(questionobj.question._id);\n      setRegions(questionobj.question.region);\n      console.log(hints[0]);\n    }, [])\n\n    const updateHint= (index:number) => (event : React.ChangeEvent<HTMLInputElement>)  => {\n      const newArr : string[] = [...hints];\n  \n      newArr[index] = event.target.value; \n  \n      setHints(newArr); \n  }\n\n  return(\n    <div >\n      <span onClick={() => {setExpand(!expand)}}>{text}   </span>\n      {\n      expand && <div style={{width: \"20px\"}}>\n     <form  id=\"updateQues\" style={{    display: \"grid\"}} onSubmit={handleSubmit}>\n      <label htmlFor=\"ques\">Text</label>\n      <input id=\"ques\" value={text} onChange={(e) => setText(e.target.value)}/>\n      <label htmlFor=\"answer\">answer</label>\n      <input id=\"answer\" value={answer} onChange={(e) => setAnswer(e.target.value)}/>\n      {hints.map((hint , ind) =>{\n        return(\n          <>\n          <label htmlFor={\"hint\"+ind}>hint{ind+1}</label>\n          <input id={\"hint\"+ind} value={hint} onChange={updateHint(ind)}/> \n          \n          </>\n        );\n      })}\n      <label htmlFor=\"keywords\">keywords</label>\n      <input id=\"keywords\" />\n      <label htmlFor=\"level\">level</label>\n      <input id=\"level\" value={level}  onChange={(e) => setLevel(Number(e.target.value))} />\n      <button type=\"submit\" form=\"updateQues\" value=\"Submit\">Submit</button>\n      <label htmlFor=\"regionname\">regionname</label>\n      <input id=\"regionname\" />\n      <label htmlFor=\"regiondesc\">regiondesc</label>\n      <input id=\"regiondesc\" />\n     </form>\n    </div>\n    }\n    </div>\n  );\n}\n\n\n\n\n function AdminAddQuestion(): ReactElement {\n\n  const[quesID , setquesID] = useState<string>('');\n  const [text , setText] = useState<string>('');\n      const [answer , setAnswer] = useState<string>('');\n      const [hints , setHints] = useState<Array<string>>([]);\n      const[keywords , setKeywords] = useState<Array<string>>([]);\n      const [level , setLevel] = useState<number>();\n      const[region , setRegions] = useState('');\n\n      const updateHint= (index:number) => (event : React.ChangeEvent<HTMLInputElement>)  => {\n        const newArr : string[] = [...hints];\n    \n        newArr[index] = event.target.value; \n    \n        setHints(newArr); \n    }\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<any> => {\n      event.preventDefault();\n      console.log(\"from handle sunb\");\n      try {\n        await put(`/questions/add/${quesID}`, {\n          text,\n          answer,\n          hints,\n          keywords,\n          level,\n          region,\n        });\n      } catch (err) {\n        throw err;\n      }\n   };\n\n   return(\n     <div>\n       <div style={{width: \"20px\"}}>\n     <form  id=\"updateQues\" style={{    display: \"grid\"}} onSubmit={handleSubmit}>\n      <label htmlFor=\"ques\">Text</label>\n      <input id=\"ques\" value={text} onChange={(e) => setText(e.target.value)}/>\n      <label htmlFor=\"answer\">answer</label>\n      <input id=\"answer\" value={answer} onChange={(e) => setAnswer(e.target.value)}/>\n      {hints.map((hint , ind) =>{\n        return(\n          <>\n          <label htmlFor={\"hint\"+ind}>hint{ind+1}</label>\n          <input id={\"hint\"+ind} value={hint} onChange={updateHint(ind)}/> \n          \n          </>\n        );\n      })}\n      <label htmlFor=\"keywords\">keywords</label>\n      <input id=\"keywords\" />\n      <label htmlFor=\"level\">level</label>\n      <input id=\"level\" value=\"{level}\"  onChange={(e) => setLevel(Number(e.target.value))} />\n      <button type=\"submit\" form=\"updateQues\" value=\"Submit\">Submit</button>\n      <label htmlFor=\"regionname\">regionname</label>\n      <input id=\"regionname\" />\n      <label htmlFor=\"regiondesc\">regiondesc</label>\n      <input id=\"regiondesc\" />\n     </form>\n    </div>\n     </div>\n   );\n }","/usr/src/client/src/pages/auth/Register.tsx",["72","73","74","75","76","77","78","79","80","81"],"import React, { ReactElement } from \"react\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Img from \"../../components/Img\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function Register({}: Props): ReactElement {\n  const [username, setUsername, resetUsername] = useInputState();\n  const [email, setEmail, resetEmail] = useInputState();\n  const [password, setPassword, resetPassword] = useInputState();\n  const [confirm, setConfirm, resetConfirm] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  return (\n    <div className=\"auth-page register\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Sign Up</h2>\n      <input\n        value={username}\n        onChange={setUsername}\n        type=\"text\"\n        placeholder=\"Name\"\n        className=\"input\"\n      />\n      <input\n        value={email}\n        onChange={setEmail}\n        type=\"text\"\n        placeholder=\"Email ID\"\n        className=\"input\"\n      />\n      <input\n        value={password}\n        onChange={setPassword}\n        type=\"password\"\n        placeholder=\"Password\"\n        className=\"input\"\n      />\n      <input\n        value={confirm}\n        onChange={setConfirm}\n        type=\"password\"\n        placeholder=\"Confirm Password\"\n        className=\"input\"\n      />\n    </div>\n  );\n}\n","/usr/src/client/src/pages/auth/Login.tsx",["82","83","84","85","86","87","88","89","90"],"import React, { ReactElement } from \"react\";\nimport { useToasts } from \"react-toast-notifications\";\nimport desktopBG from \"../../assets/backround/desktop.png\";\nimport Img from \"../../components/Img\";\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nexport default function Login({}: Props): ReactElement {\n  const [username, setUsername, resetUsername] = useInputState();\n  const [password, setPassword, resetPassword] = useInputState();\n\n  const [errors, setErrors] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const { addToast } = useToasts();\n\n  const handleForgot = () => {};\n  const handleSubmit = () => {};\n\n  return (\n    <div className=\"auth-page login\">\n      <Img src={desktopBG} className=\"background\" />\n      <h1>HAWKEYE</h1>\n      <h2>Log in</h2>\n      <h3>Welcome back player</h3>\n      <input\n        value={username}\n        onChange={setUsername}\n        type=\"text\"\n        placeholder=\"Username\"\n        className=\"input\"\n      />\n      <input\n        value={password}\n        onChange={setPassword}\n        type=\"password\"\n        placeholder=\"Password\"\n        className=\"input\"\n      />\n      <div className=\"forgot\">\n        <span onClick={handleForgot}>Forgot Password?</span>\n      </div>\n      <button>Login</button>\n    </div>\n  );\n}\n","/usr/src/client/src/components/Loading.tsx",[],"/usr/src/client/src/hooks/useInputState.ts",[],"/usr/src/client/src/components/Img.tsx",[],"/usr/src/client/src/pages/Landing.tsx",[],{"ruleId":"91","severity":1,"message":"92","line":87,"column":6,"nodeType":"93","endLine":87,"endColumn":8,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":15,"nodeType":"97","messageId":"98","endLine":2,"endColumn":19},{"ruleId":"91","severity":1,"message":"99","line":135,"column":8,"nodeType":"93","endLine":135,"endColumn":10,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"101","line":185,"column":18,"nodeType":"97","messageId":"98","endLine":185,"endColumn":27},{"ruleId":"95","severity":1,"message":"102","line":189,"column":24,"nodeType":"97","messageId":"98","endLine":189,"endColumn":35},{"ruleId":"95","severity":1,"message":"103","line":191,"column":22,"nodeType":"97","messageId":"98","endLine":191,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":9,"column":34,"nodeType":"106","messageId":"107","endLine":9,"endColumn":43},{"ruleId":"95","severity":1,"message":"108","line":10,"column":33,"nodeType":"97","messageId":"98","endLine":10,"endColumn":46},{"ruleId":"95","severity":1,"message":"109","line":11,"column":27,"nodeType":"97","messageId":"98","endLine":11,"endColumn":37},{"ruleId":"95","severity":1,"message":"110","line":12,"column":33,"nodeType":"97","messageId":"98","endLine":12,"endColumn":46},{"ruleId":"95","severity":1,"message":"111","line":13,"column":31,"nodeType":"97","messageId":"98","endLine":13,"endColumn":43},{"ruleId":"95","severity":1,"message":"112","line":15,"column":10,"nodeType":"97","messageId":"98","endLine":15,"endColumn":16},{"ruleId":"95","severity":1,"message":"113","line":15,"column":18,"nodeType":"97","messageId":"98","endLine":15,"endColumn":27},{"ruleId":"95","severity":1,"message":"114","line":16,"column":10,"nodeType":"97","messageId":"98","endLine":16,"endColumn":17},{"ruleId":"95","severity":1,"message":"115","line":16,"column":19,"nodeType":"97","messageId":"98","endLine":16,"endColumn":29},{"ruleId":"95","severity":1,"message":"116","line":18,"column":11,"nodeType":"97","messageId":"98","endLine":18,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":9,"column":31,"nodeType":"106","messageId":"107","endLine":9,"endColumn":40},{"ruleId":"95","severity":1,"message":"108","line":10,"column":33,"nodeType":"97","messageId":"98","endLine":10,"endColumn":46},{"ruleId":"95","severity":1,"message":"110","line":11,"column":33,"nodeType":"97","messageId":"98","endLine":11,"endColumn":46},{"ruleId":"95","severity":1,"message":"112","line":13,"column":10,"nodeType":"97","messageId":"98","endLine":13,"endColumn":16},{"ruleId":"95","severity":1,"message":"113","line":13,"column":18,"nodeType":"97","messageId":"98","endLine":13,"endColumn":27},{"ruleId":"95","severity":1,"message":"114","line":14,"column":10,"nodeType":"97","messageId":"98","endLine":14,"endColumn":17},{"ruleId":"95","severity":1,"message":"115","line":14,"column":19,"nodeType":"97","messageId":"98","endLine":14,"endColumn":29},{"ruleId":"95","severity":1,"message":"116","line":16,"column":11,"nodeType":"97","messageId":"98","endLine":16,"endColumn":19},{"ruleId":"95","severity":1,"message":"117","line":19,"column":9,"nodeType":"97","messageId":"98","endLine":19,"endColumn":21},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMe'. Either include it or remove the dependency array.","ArrayExpression",["118"],"@typescript-eslint/no-unused-vars","'post' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'hints', 'questionobj.question._id', 'questionobj.question.answer', 'questionobj.question.hints', 'questionobj.question.keywords', 'questionobj.question.level', 'questionobj.question.region', and 'questionobj.question.text'. Either include them or remove the dependency array. If 'setText' needs the current value of 'questionobj.question.text', you can also switch to useReducer instead of useState and read 'questionobj.question.text' in the reducer.",["119"],"'setquesID' is assigned a value but never used.","'setKeywords' is assigned a value but never used.","'setRegions' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'resetUsername' is assigned a value but never used.","'resetEmail' is assigned a value but never used.","'resetPassword' is assigned a value but never used.","'resetConfirm' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'addToast' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [fetchMe]",{"range":"124","text":"125"},"Update the dependencies array to be: [hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]",{"range":"126","text":"127"},[1650,1652],"[fetchMe]",[3316,3318],"[hints, questionobj.question._id, questionobj.question.answer, questionobj.question.hints, questionobj.question.keywords, questionobj.question.level, questionobj.question.region, questionobj.question.text]"]